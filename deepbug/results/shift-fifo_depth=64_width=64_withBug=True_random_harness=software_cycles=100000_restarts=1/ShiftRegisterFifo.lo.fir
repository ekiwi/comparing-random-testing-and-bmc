circuit ShiftRegisterFifo :
  module ShiftRegisterFifo :
    input clock : Clock
    input reset : UInt<1>
    input io_push : UInt<1>
    input io_pop : UInt<1>
    input io_data_in : UInt<64>
    output io_full : UInt<1>
    output io_empty : UInt<1>
    output io_data_out : UInt<64>

    reg count : UInt<7>, clock with :
      reset => (UInt<1>("h0"), count) @[ShiftRegisterFifo.scala 14:22]
    node _count_T = add(count, io_push) @[ShiftRegisterFifo.scala 15:18]
    node _count_T_1 = tail(_count_T, 1) @[ShiftRegisterFifo.scala 15:18]
    node _count_T_2 = sub(_count_T_1, io_pop) @[ShiftRegisterFifo.scala 15:28]
    node _count_T_3 = tail(_count_T_2, 1) @[ShiftRegisterFifo.scala 15:28]
    node _io_empty_T = eq(count, UInt<1>("h0")) @[ShiftRegisterFifo.scala 17:21]
    node _io_full_T = geq(count, UInt<7>("h40")) @[ShiftRegisterFifo.scala 18:20]
    reg entries_0 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_0) @[ShiftRegisterFifo.scala 22:22]
    node _entries_T = eq(count, UInt<1>("h0")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_1 = and(io_push, _entries_T) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_2 = or(io_pop, _entries_T_1) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_0_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_0_T_1 = tail(_next_value_0_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_0_T_2 = eq(_next_value_0_T_1, UInt<1>("h0")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_0_T_3 = and(io_push, _next_value_0_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_1 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_1) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed = mux(io_pop, entries_1, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_0_T_4 = mux(_next_value_0_T_3, io_data_in, not_pushed) @[ShiftRegisterFifo.scala 33:16]
    node next_value_0 = _next_value_0_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_0 = mux(_entries_T_2, next_value_0, entries_0) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_3 = eq(count, UInt<1>("h1")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_4 = and(io_push, _entries_T_3) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_5 = or(io_pop, _entries_T_4) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_1_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_1_T_1 = tail(_next_value_1_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_1_T_2 = eq(_next_value_1_T_1, UInt<1>("h1")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_1_T_3 = and(io_push, _next_value_1_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_2 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_2) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_1 = mux(io_pop, entries_2, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_1_T_4 = mux(_next_value_1_T_3, io_data_in, not_pushed_1) @[ShiftRegisterFifo.scala 33:16]
    node next_value_1 = _next_value_1_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_1 = mux(_entries_T_5, next_value_1, entries_1) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_6 = eq(count, UInt<2>("h2")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_7 = and(io_push, _entries_T_6) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_8 = or(io_pop, _entries_T_7) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_2_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_2_T_1 = tail(_next_value_2_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_2_T_2 = eq(_next_value_2_T_1, UInt<2>("h2")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_2_T_3 = and(io_push, _next_value_2_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_3 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_3) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_2 = mux(io_pop, entries_3, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_2_T_4 = mux(_next_value_2_T_3, io_data_in, not_pushed_2) @[ShiftRegisterFifo.scala 33:16]
    node next_value_2 = _next_value_2_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_2 = mux(_entries_T_8, next_value_2, entries_2) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_9 = eq(count, UInt<2>("h3")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_10 = and(io_push, _entries_T_9) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_11 = or(io_pop, _entries_T_10) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_3_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_3_T_1 = tail(_next_value_3_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_3_T_2 = eq(_next_value_3_T_1, UInt<2>("h3")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_3_T_3 = and(io_push, _next_value_3_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_4 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_4) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_3 = mux(io_pop, entries_4, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_3_T_4 = mux(_next_value_3_T_3, io_data_in, not_pushed_3) @[ShiftRegisterFifo.scala 33:16]
    node next_value_3 = _next_value_3_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_3 = mux(_entries_T_11, next_value_3, entries_3) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_12 = eq(count, UInt<3>("h4")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_13 = and(io_push, _entries_T_12) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_14 = or(io_pop, _entries_T_13) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_4_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_4_T_1 = tail(_next_value_4_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_4_T_2 = eq(_next_value_4_T_1, UInt<3>("h4")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_4_T_3 = and(io_push, _next_value_4_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_5 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_5) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_4 = mux(io_pop, entries_5, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_4_T_4 = mux(_next_value_4_T_3, io_data_in, not_pushed_4) @[ShiftRegisterFifo.scala 33:16]
    node next_value_4 = _next_value_4_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_4 = mux(_entries_T_14, next_value_4, entries_4) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_15 = eq(count, UInt<3>("h5")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_16 = and(io_push, _entries_T_15) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_17 = or(io_pop, _entries_T_16) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_5_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_5_T_1 = tail(_next_value_5_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_5_T_2 = eq(_next_value_5_T_1, UInt<3>("h5")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_5_T_3 = and(io_push, _next_value_5_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_6 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_6) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_5 = mux(io_pop, entries_6, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_5_T_4 = mux(_next_value_5_T_3, io_data_in, not_pushed_5) @[ShiftRegisterFifo.scala 33:16]
    node next_value_5 = _next_value_5_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_5 = mux(_entries_T_17, next_value_5, entries_5) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_18 = eq(count, UInt<3>("h6")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_19 = and(io_push, _entries_T_18) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_20 = or(io_pop, _entries_T_19) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_6_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_6_T_1 = tail(_next_value_6_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_6_T_2 = eq(_next_value_6_T_1, UInt<3>("h6")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_6_T_3 = and(io_push, _next_value_6_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_7 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_7) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_6 = mux(io_pop, entries_7, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_6_T_4 = mux(_next_value_6_T_3, io_data_in, not_pushed_6) @[ShiftRegisterFifo.scala 33:16]
    node next_value_6 = _next_value_6_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_6 = mux(_entries_T_20, next_value_6, entries_6) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_21 = eq(count, UInt<3>("h7")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_22 = and(io_push, _entries_T_21) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_23 = or(io_pop, _entries_T_22) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_7_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_7_T_1 = tail(_next_value_7_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_7_T_2 = eq(_next_value_7_T_1, UInt<3>("h7")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_7_T_3 = and(io_push, _next_value_7_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_8 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_8) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_7 = mux(io_pop, entries_8, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_7_T_4 = mux(_next_value_7_T_3, io_data_in, not_pushed_7) @[ShiftRegisterFifo.scala 33:16]
    node next_value_7 = _next_value_7_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_7 = mux(_entries_T_23, next_value_7, entries_7) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_24 = eq(count, UInt<4>("h8")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_25 = and(io_push, _entries_T_24) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_26 = or(io_pop, _entries_T_25) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_8_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_8_T_1 = tail(_next_value_8_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_8_T_2 = eq(_next_value_8_T_1, UInt<4>("h8")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_8_T_3 = and(io_push, _next_value_8_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_9 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_9) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_8 = mux(io_pop, entries_9, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_8_T_4 = mux(_next_value_8_T_3, io_data_in, not_pushed_8) @[ShiftRegisterFifo.scala 33:16]
    node next_value_8 = _next_value_8_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_8 = mux(_entries_T_26, next_value_8, entries_8) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_27 = eq(count, UInt<4>("h9")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_28 = and(io_push, _entries_T_27) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_29 = or(io_pop, _entries_T_28) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_9_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_9_T_1 = tail(_next_value_9_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_9_T_2 = eq(_next_value_9_T_1, UInt<4>("h9")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_9_T_3 = and(io_push, _next_value_9_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_10 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_10) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_9 = mux(io_pop, entries_10, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_9_T_4 = mux(_next_value_9_T_3, io_data_in, not_pushed_9) @[ShiftRegisterFifo.scala 33:16]
    node next_value_9 = _next_value_9_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_9 = mux(_entries_T_29, next_value_9, entries_9) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_30 = eq(count, UInt<4>("ha")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_31 = and(io_push, _entries_T_30) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_32 = or(io_pop, _entries_T_31) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_10_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_10_T_1 = tail(_next_value_10_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_10_T_2 = eq(_next_value_10_T_1, UInt<4>("ha")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_10_T_3 = and(io_push, _next_value_10_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_11 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_11) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_10 = mux(io_pop, entries_11, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_10_T_4 = mux(_next_value_10_T_3, io_data_in, not_pushed_10) @[ShiftRegisterFifo.scala 33:16]
    node next_value_10 = _next_value_10_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_10 = mux(_entries_T_32, next_value_10, entries_10) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_33 = eq(count, UInt<4>("hb")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_34 = and(io_push, _entries_T_33) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_35 = or(io_pop, _entries_T_34) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_11_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_11_T_1 = tail(_next_value_11_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_11_T_2 = eq(_next_value_11_T_1, UInt<4>("hb")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_11_T_3 = and(io_push, _next_value_11_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_12 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_12) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_11 = mux(io_pop, entries_12, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_11_T_4 = mux(_next_value_11_T_3, io_data_in, not_pushed_11) @[ShiftRegisterFifo.scala 33:16]
    node next_value_11 = _next_value_11_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_11 = mux(_entries_T_35, next_value_11, entries_11) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_36 = eq(count, UInt<4>("hc")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_37 = and(io_push, _entries_T_36) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_38 = or(io_pop, _entries_T_37) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_12_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_12_T_1 = tail(_next_value_12_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_12_T_2 = eq(_next_value_12_T_1, UInt<4>("hc")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_12_T_3 = and(io_push, _next_value_12_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_13 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_13) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_12 = mux(io_pop, entries_13, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_12_T_4 = mux(_next_value_12_T_3, io_data_in, not_pushed_12) @[ShiftRegisterFifo.scala 33:16]
    node next_value_12 = _next_value_12_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_12 = mux(_entries_T_38, next_value_12, entries_12) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_39 = eq(count, UInt<4>("hd")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_40 = and(io_push, _entries_T_39) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_41 = or(io_pop, _entries_T_40) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_13_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_13_T_1 = tail(_next_value_13_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_13_T_2 = eq(_next_value_13_T_1, UInt<4>("hd")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_13_T_3 = and(io_push, _next_value_13_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_14 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_14) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_13 = mux(io_pop, entries_14, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_13_T_4 = mux(_next_value_13_T_3, io_data_in, not_pushed_13) @[ShiftRegisterFifo.scala 33:16]
    node next_value_13 = _next_value_13_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_13 = mux(_entries_T_41, next_value_13, entries_13) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_42 = eq(count, UInt<4>("he")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_43 = and(io_push, _entries_T_42) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_44 = or(io_pop, _entries_T_43) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_14_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_14_T_1 = tail(_next_value_14_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_14_T_2 = eq(_next_value_14_T_1, UInt<4>("he")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_14_T_3 = and(io_push, _next_value_14_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_15 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_15) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_14 = mux(io_pop, entries_15, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_14_T_4 = mux(_next_value_14_T_3, io_data_in, not_pushed_14) @[ShiftRegisterFifo.scala 33:16]
    node next_value_14 = _next_value_14_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_14 = mux(_entries_T_44, next_value_14, entries_14) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_45 = eq(count, UInt<4>("hf")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_46 = and(io_push, _entries_T_45) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_47 = or(io_pop, _entries_T_46) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_15_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_15_T_1 = tail(_next_value_15_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_15_T_2 = eq(_next_value_15_T_1, UInt<4>("hf")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_15_T_3 = and(io_push, _next_value_15_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_16 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_16) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_15 = mux(io_pop, entries_16, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_15_T_4 = mux(_next_value_15_T_3, io_data_in, not_pushed_15) @[ShiftRegisterFifo.scala 33:16]
    node next_value_15 = _next_value_15_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_15 = mux(_entries_T_47, next_value_15, entries_15) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_48 = eq(count, UInt<5>("h10")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_49 = and(io_push, _entries_T_48) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_50 = or(io_pop, _entries_T_49) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_16_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_16_T_1 = tail(_next_value_16_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_16_T_2 = eq(_next_value_16_T_1, UInt<5>("h10")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_16_T_3 = and(io_push, _next_value_16_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_17 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_17) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_16 = mux(io_pop, entries_17, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_16_T_4 = mux(_next_value_16_T_3, io_data_in, not_pushed_16) @[ShiftRegisterFifo.scala 33:16]
    node next_value_16 = _next_value_16_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_16 = mux(_entries_T_50, next_value_16, entries_16) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_51 = eq(count, UInt<5>("h11")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_52 = and(io_push, _entries_T_51) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_53 = or(io_pop, _entries_T_52) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_17_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_17_T_1 = tail(_next_value_17_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_17_T_2 = eq(_next_value_17_T_1, UInt<5>("h11")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_17_T_3 = and(io_push, _next_value_17_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_18 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_18) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_17 = mux(io_pop, entries_18, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_17_T_4 = mux(_next_value_17_T_3, io_data_in, not_pushed_17) @[ShiftRegisterFifo.scala 33:16]
    node next_value_17 = _next_value_17_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_17 = mux(_entries_T_53, next_value_17, entries_17) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_54 = eq(count, UInt<5>("h12")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_55 = and(io_push, _entries_T_54) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_56 = or(io_pop, _entries_T_55) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_18_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_18_T_1 = tail(_next_value_18_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_18_T_2 = eq(_next_value_18_T_1, UInt<5>("h12")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_18_T_3 = and(io_push, _next_value_18_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_19 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_19) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_18 = mux(io_pop, entries_19, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_18_T_4 = mux(_next_value_18_T_3, io_data_in, not_pushed_18) @[ShiftRegisterFifo.scala 33:16]
    node next_value_18 = _next_value_18_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_18 = mux(_entries_T_56, next_value_18, entries_18) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_57 = eq(count, UInt<5>("h13")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_58 = and(io_push, _entries_T_57) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_59 = or(io_pop, _entries_T_58) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_19_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_19_T_1 = tail(_next_value_19_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_19_T_2 = eq(_next_value_19_T_1, UInt<5>("h13")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_19_T_3 = and(io_push, _next_value_19_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_20 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_20) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_19 = mux(io_pop, entries_20, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_19_T_4 = mux(_next_value_19_T_3, io_data_in, not_pushed_19) @[ShiftRegisterFifo.scala 33:16]
    node next_value_19 = _next_value_19_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_19 = mux(_entries_T_59, next_value_19, entries_19) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_60 = eq(count, UInt<5>("h14")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_61 = and(io_push, _entries_T_60) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_62 = or(io_pop, _entries_T_61) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_20_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_20_T_1 = tail(_next_value_20_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_20_T_2 = eq(_next_value_20_T_1, UInt<5>("h14")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_20_T_3 = and(io_push, _next_value_20_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_21 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_21) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_20 = mux(io_pop, entries_21, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_20_T_4 = mux(_next_value_20_T_3, io_data_in, not_pushed_20) @[ShiftRegisterFifo.scala 33:16]
    node next_value_20 = _next_value_20_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_20 = mux(_entries_T_62, next_value_20, entries_20) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_63 = eq(count, UInt<5>("h15")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_64 = and(io_push, _entries_T_63) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_65 = or(io_pop, _entries_T_64) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_21_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_21_T_1 = tail(_next_value_21_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_21_T_2 = eq(_next_value_21_T_1, UInt<5>("h15")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_21_T_3 = and(io_push, _next_value_21_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_22 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_22) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_21 = mux(io_pop, entries_22, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_21_T_4 = mux(_next_value_21_T_3, io_data_in, not_pushed_21) @[ShiftRegisterFifo.scala 33:16]
    node next_value_21 = _next_value_21_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_21 = mux(_entries_T_65, next_value_21, entries_21) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_66 = eq(count, UInt<5>("h16")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_67 = and(io_push, _entries_T_66) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_68 = or(io_pop, _entries_T_67) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_22_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_22_T_1 = tail(_next_value_22_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_22_T_2 = eq(_next_value_22_T_1, UInt<5>("h16")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_22_T_3 = and(io_push, _next_value_22_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_23 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_23) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_22 = mux(io_pop, entries_23, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_22_T_4 = mux(_next_value_22_T_3, io_data_in, not_pushed_22) @[ShiftRegisterFifo.scala 33:16]
    node next_value_22 = _next_value_22_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_22 = mux(_entries_T_68, next_value_22, entries_22) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_69 = eq(count, UInt<5>("h17")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_70 = and(io_push, _entries_T_69) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_71 = or(io_pop, _entries_T_70) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_23_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_23_T_1 = tail(_next_value_23_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_23_T_2 = eq(_next_value_23_T_1, UInt<5>("h17")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_23_T_3 = and(io_push, _next_value_23_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_24 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_24) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_23 = mux(io_pop, entries_24, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_23_T_4 = mux(_next_value_23_T_3, io_data_in, not_pushed_23) @[ShiftRegisterFifo.scala 33:16]
    node next_value_23 = _next_value_23_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_23 = mux(_entries_T_71, next_value_23, entries_23) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_72 = eq(count, UInt<5>("h18")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_73 = and(io_push, _entries_T_72) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_74 = or(io_pop, _entries_T_73) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_24_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_24_T_1 = tail(_next_value_24_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_24_T_2 = eq(_next_value_24_T_1, UInt<5>("h18")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_24_T_3 = and(io_push, _next_value_24_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_25 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_25) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_24 = mux(io_pop, entries_25, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_24_T_4 = mux(_next_value_24_T_3, io_data_in, not_pushed_24) @[ShiftRegisterFifo.scala 33:16]
    node next_value_24 = _next_value_24_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_24 = mux(_entries_T_74, next_value_24, entries_24) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_75 = eq(count, UInt<5>("h19")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_76 = and(io_push, _entries_T_75) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_77 = or(io_pop, _entries_T_76) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_25_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_25_T_1 = tail(_next_value_25_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_25_T_2 = eq(_next_value_25_T_1, UInt<5>("h19")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_25_T_3 = and(io_push, _next_value_25_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_26 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_26) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_25 = mux(io_pop, entries_26, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_25_T_4 = mux(_next_value_25_T_3, io_data_in, not_pushed_25) @[ShiftRegisterFifo.scala 33:16]
    node next_value_25 = _next_value_25_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_25 = mux(_entries_T_77, next_value_25, entries_25) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_78 = eq(count, UInt<5>("h1a")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_79 = and(io_push, _entries_T_78) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_80 = or(io_pop, _entries_T_79) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_26_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_26_T_1 = tail(_next_value_26_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_26_T_2 = eq(_next_value_26_T_1, UInt<5>("h1a")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_26_T_3 = and(io_push, _next_value_26_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_27 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_27) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_26 = mux(io_pop, entries_27, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_26_T_4 = mux(_next_value_26_T_3, io_data_in, not_pushed_26) @[ShiftRegisterFifo.scala 33:16]
    node next_value_26 = _next_value_26_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_26 = mux(_entries_T_80, next_value_26, entries_26) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_81 = eq(count, UInt<5>("h1b")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_82 = and(io_push, _entries_T_81) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_83 = or(io_pop, _entries_T_82) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_27_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_27_T_1 = tail(_next_value_27_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_27_T_2 = eq(_next_value_27_T_1, UInt<5>("h1b")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_27_T_3 = and(io_push, _next_value_27_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_28 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_28) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_27 = mux(io_pop, entries_28, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_27_T_4 = mux(_next_value_27_T_3, io_data_in, not_pushed_27) @[ShiftRegisterFifo.scala 33:16]
    node next_value_27 = _next_value_27_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_27 = mux(_entries_T_83, next_value_27, entries_27) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_84 = eq(count, UInt<5>("h1c")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_85 = and(io_push, _entries_T_84) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_86 = or(io_pop, _entries_T_85) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_28_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_28_T_1 = tail(_next_value_28_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_28_T_2 = eq(_next_value_28_T_1, UInt<5>("h1c")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_28_T_3 = and(io_push, _next_value_28_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_29 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_29) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_28 = mux(io_pop, entries_29, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_28_T_4 = mux(_next_value_28_T_3, io_data_in, not_pushed_28) @[ShiftRegisterFifo.scala 33:16]
    node next_value_28 = _next_value_28_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_28 = mux(_entries_T_86, next_value_28, entries_28) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_87 = eq(count, UInt<5>("h1d")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_88 = and(io_push, _entries_T_87) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_89 = or(io_pop, _entries_T_88) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_29_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_29_T_1 = tail(_next_value_29_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_29_T_2 = eq(_next_value_29_T_1, UInt<5>("h1d")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_29_T_3 = and(io_push, _next_value_29_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_30 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_30) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_29 = mux(io_pop, entries_30, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_29_T_4 = mux(_next_value_29_T_3, io_data_in, not_pushed_29) @[ShiftRegisterFifo.scala 33:16]
    node next_value_29 = _next_value_29_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_29 = mux(_entries_T_89, next_value_29, entries_29) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_90 = eq(count, UInt<5>("h1e")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_91 = and(io_push, _entries_T_90) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_92 = or(io_pop, _entries_T_91) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_30_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_30_T_1 = tail(_next_value_30_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_30_T_2 = eq(_next_value_30_T_1, UInt<5>("h1e")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_30_T_3 = and(io_push, _next_value_30_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_31 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_31) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_30 = mux(io_pop, entries_31, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_30_T_4 = mux(_next_value_30_T_3, io_data_in, not_pushed_30) @[ShiftRegisterFifo.scala 33:16]
    node next_value_30 = _next_value_30_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_30 = mux(_entries_T_92, next_value_30, entries_30) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_93 = eq(count, UInt<5>("h1f")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_94 = and(io_push, _entries_T_93) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_95 = or(io_pop, _entries_T_94) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_31_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_31_T_1 = tail(_next_value_31_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_31_T_2 = eq(_next_value_31_T_1, UInt<5>("h1f")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_31_T_3 = and(io_push, _next_value_31_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_32 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_32) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_31 = mux(io_pop, entries_32, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_31_T_4 = mux(_next_value_31_T_3, io_data_in, not_pushed_31) @[ShiftRegisterFifo.scala 33:16]
    node next_value_31 = _next_value_31_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_31 = mux(_entries_T_95, next_value_31, entries_31) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_96 = eq(count, UInt<6>("h20")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_97 = and(io_push, _entries_T_96) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_98 = or(io_pop, _entries_T_97) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_32_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_32_T_1 = tail(_next_value_32_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_32_T_2 = eq(_next_value_32_T_1, UInt<6>("h20")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_32_T_3 = and(io_push, _next_value_32_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_33 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_33) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_32 = mux(io_pop, entries_33, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_32_T_4 = mux(_next_value_32_T_3, io_data_in, not_pushed_32) @[ShiftRegisterFifo.scala 33:16]
    node next_value_32 = _next_value_32_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_32 = mux(_entries_T_98, next_value_32, entries_32) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_99 = eq(count, UInt<6>("h21")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_100 = and(io_push, _entries_T_99) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_101 = or(io_pop, _entries_T_100) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_33_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_33_T_1 = tail(_next_value_33_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_33_T_2 = eq(_next_value_33_T_1, UInt<6>("h21")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_33_T_3 = and(io_push, _next_value_33_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_34 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_34) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_33 = mux(io_pop, entries_34, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_33_T_4 = mux(_next_value_33_T_3, io_data_in, not_pushed_33) @[ShiftRegisterFifo.scala 33:16]
    node next_value_33 = _next_value_33_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_33 = mux(_entries_T_101, next_value_33, entries_33) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_102 = eq(count, UInt<6>("h22")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_103 = and(io_push, _entries_T_102) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_104 = or(io_pop, _entries_T_103) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_34_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_34_T_1 = tail(_next_value_34_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_34_T_2 = eq(_next_value_34_T_1, UInt<6>("h22")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_34_T_3 = and(io_push, _next_value_34_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_35 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_35) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_34 = mux(io_pop, entries_35, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_34_T_4 = mux(_next_value_34_T_3, io_data_in, not_pushed_34) @[ShiftRegisterFifo.scala 33:16]
    node next_value_34 = _next_value_34_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_34 = mux(_entries_T_104, next_value_34, entries_34) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_105 = eq(count, UInt<6>("h23")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_106 = and(io_push, _entries_T_105) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_107 = or(io_pop, _entries_T_106) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_35_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_35_T_1 = tail(_next_value_35_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_35_T_2 = eq(_next_value_35_T_1, UInt<6>("h23")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_35_T_3 = and(io_push, _next_value_35_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_36 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_36) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_35 = mux(io_pop, entries_36, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_35_T_4 = mux(_next_value_35_T_3, io_data_in, not_pushed_35) @[ShiftRegisterFifo.scala 33:16]
    node next_value_35 = _next_value_35_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_35 = mux(_entries_T_107, next_value_35, entries_35) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_108 = eq(count, UInt<6>("h24")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_109 = and(io_push, _entries_T_108) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_110 = or(io_pop, _entries_T_109) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_36_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_36_T_1 = tail(_next_value_36_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_36_T_2 = eq(_next_value_36_T_1, UInt<6>("h24")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_36_T_3 = and(io_push, _next_value_36_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_37 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_37) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_36 = mux(io_pop, entries_37, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_36_T_4 = mux(_next_value_36_T_3, io_data_in, not_pushed_36) @[ShiftRegisterFifo.scala 33:16]
    node next_value_36 = _next_value_36_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_36 = mux(_entries_T_110, next_value_36, entries_36) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_111 = eq(count, UInt<6>("h25")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_112 = and(io_push, _entries_T_111) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_113 = or(io_pop, _entries_T_112) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_37_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_37_T_1 = tail(_next_value_37_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_37_T_2 = eq(_next_value_37_T_1, UInt<6>("h25")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_37_T_3 = and(io_push, _next_value_37_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_38 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_38) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_37 = mux(io_pop, entries_38, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_37_T_4 = mux(_next_value_37_T_3, io_data_in, not_pushed_37) @[ShiftRegisterFifo.scala 33:16]
    node next_value_37 = _next_value_37_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_37 = mux(_entries_T_113, next_value_37, entries_37) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_114 = eq(count, UInt<6>("h26")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_115 = and(io_push, _entries_T_114) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_116 = or(io_pop, _entries_T_115) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_38_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_38_T_1 = tail(_next_value_38_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_38_T_2 = eq(_next_value_38_T_1, UInt<6>("h26")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_38_T_3 = and(io_push, _next_value_38_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_39 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_39) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_38 = mux(io_pop, entries_39, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_38_T_4 = mux(_next_value_38_T_3, io_data_in, not_pushed_38) @[ShiftRegisterFifo.scala 33:16]
    node next_value_38 = _next_value_38_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_38 = mux(_entries_T_116, next_value_38, entries_38) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_117 = eq(count, UInt<6>("h27")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_118 = and(io_push, _entries_T_117) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_119 = or(io_pop, _entries_T_118) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_39_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_39_T_1 = tail(_next_value_39_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_39_T_2 = eq(_next_value_39_T_1, UInt<6>("h27")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_39_T_3 = and(io_push, _next_value_39_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_40 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_40) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_39 = mux(io_pop, entries_40, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_39_T_4 = mux(_next_value_39_T_3, io_data_in, not_pushed_39) @[ShiftRegisterFifo.scala 33:16]
    node next_value_39 = _next_value_39_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_39 = mux(_entries_T_119, next_value_39, entries_39) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_120 = eq(count, UInt<6>("h28")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_121 = and(io_push, _entries_T_120) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_122 = or(io_pop, _entries_T_121) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_40_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_40_T_1 = tail(_next_value_40_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_40_T_2 = eq(_next_value_40_T_1, UInt<6>("h28")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_40_T_3 = and(io_push, _next_value_40_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_41 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_41) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_40 = mux(io_pop, entries_41, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_40_T_4 = mux(_next_value_40_T_3, io_data_in, not_pushed_40) @[ShiftRegisterFifo.scala 33:16]
    node next_value_40 = _next_value_40_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_40 = mux(_entries_T_122, next_value_40, entries_40) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_123 = eq(count, UInt<6>("h29")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_124 = and(io_push, _entries_T_123) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_125 = or(io_pop, _entries_T_124) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_41_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_41_T_1 = tail(_next_value_41_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_41_T_2 = eq(_next_value_41_T_1, UInt<6>("h29")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_41_T_3 = and(io_push, _next_value_41_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_42 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_42) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_41 = mux(io_pop, entries_42, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_41_T_4 = mux(_next_value_41_T_3, io_data_in, not_pushed_41) @[ShiftRegisterFifo.scala 33:16]
    node next_value_41 = _next_value_41_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_41 = mux(_entries_T_125, next_value_41, entries_41) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_126 = eq(count, UInt<6>("h2a")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_127 = and(io_push, _entries_T_126) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_128 = or(io_pop, _entries_T_127) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_42_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_42_T_1 = tail(_next_value_42_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_42_T_2 = eq(_next_value_42_T_1, UInt<6>("h2a")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_42_T_3 = and(io_push, _next_value_42_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_43 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_43) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_42 = mux(io_pop, entries_43, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_42_T_4 = mux(_next_value_42_T_3, io_data_in, not_pushed_42) @[ShiftRegisterFifo.scala 33:16]
    node next_value_42 = _next_value_42_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_42 = mux(_entries_T_128, next_value_42, entries_42) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_129 = eq(count, UInt<6>("h2b")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_130 = and(io_push, _entries_T_129) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_131 = or(io_pop, _entries_T_130) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_43_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_43_T_1 = tail(_next_value_43_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_43_T_2 = eq(_next_value_43_T_1, UInt<6>("h2b")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_43_T_3 = and(io_push, _next_value_43_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_44 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_44) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_43 = mux(io_pop, entries_44, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_43_T_4 = mux(_next_value_43_T_3, io_data_in, not_pushed_43) @[ShiftRegisterFifo.scala 33:16]
    node next_value_43 = _next_value_43_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_43 = mux(_entries_T_131, next_value_43, entries_43) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_132 = eq(count, UInt<6>("h2c")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_133 = and(io_push, _entries_T_132) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_134 = or(io_pop, _entries_T_133) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_44_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_44_T_1 = tail(_next_value_44_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_44_T_2 = eq(_next_value_44_T_1, UInt<6>("h2c")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_44_T_3 = and(io_push, _next_value_44_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_45 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_45) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_44 = mux(io_pop, entries_45, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_44_T_4 = mux(_next_value_44_T_3, io_data_in, not_pushed_44) @[ShiftRegisterFifo.scala 33:16]
    node next_value_44 = _next_value_44_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_44 = mux(_entries_T_134, next_value_44, entries_44) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_135 = eq(count, UInt<6>("h2d")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_136 = and(io_push, _entries_T_135) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_137 = or(io_pop, _entries_T_136) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_45_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_45_T_1 = tail(_next_value_45_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_45_T_2 = eq(_next_value_45_T_1, UInt<6>("h2d")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_45_T_3 = and(io_push, _next_value_45_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_46 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_46) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_45 = mux(io_pop, entries_46, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_45_T_4 = mux(_next_value_45_T_3, io_data_in, not_pushed_45) @[ShiftRegisterFifo.scala 33:16]
    node next_value_45 = _next_value_45_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_45 = mux(_entries_T_137, next_value_45, entries_45) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_138 = eq(count, UInt<6>("h2e")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_139 = and(io_push, _entries_T_138) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_140 = or(io_pop, _entries_T_139) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_46_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_46_T_1 = tail(_next_value_46_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_46_T_2 = eq(_next_value_46_T_1, UInt<6>("h2e")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_46_T_3 = and(io_push, _next_value_46_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_47 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_47) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_46 = mux(io_pop, entries_47, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_46_T_4 = mux(_next_value_46_T_3, io_data_in, not_pushed_46) @[ShiftRegisterFifo.scala 33:16]
    node next_value_46 = _next_value_46_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_46 = mux(_entries_T_140, next_value_46, entries_46) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_141 = eq(count, UInt<6>("h2f")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_142 = and(io_push, _entries_T_141) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_143 = or(io_pop, _entries_T_142) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_47_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_47_T_1 = tail(_next_value_47_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_47_T_2 = eq(_next_value_47_T_1, UInt<6>("h2f")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_47_T_3 = and(io_push, _next_value_47_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_48 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_48) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_47 = mux(io_pop, entries_48, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_47_T_4 = mux(_next_value_47_T_3, io_data_in, not_pushed_47) @[ShiftRegisterFifo.scala 33:16]
    node next_value_47 = _next_value_47_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_47 = mux(_entries_T_143, next_value_47, entries_47) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_144 = eq(count, UInt<6>("h30")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_145 = and(io_push, _entries_T_144) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_146 = or(io_pop, _entries_T_145) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_48_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_48_T_1 = tail(_next_value_48_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_48_T_2 = eq(_next_value_48_T_1, UInt<6>("h30")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_48_T_3 = and(io_push, _next_value_48_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_49 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_49) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_48 = mux(io_pop, entries_49, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_48_T_4 = mux(_next_value_48_T_3, io_data_in, not_pushed_48) @[ShiftRegisterFifo.scala 33:16]
    node next_value_48 = _next_value_48_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_48 = mux(_entries_T_146, next_value_48, entries_48) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_147 = eq(count, UInt<6>("h31")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_148 = and(io_push, _entries_T_147) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_149 = or(io_pop, _entries_T_148) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_49_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_49_T_1 = tail(_next_value_49_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_49_T_2 = eq(_next_value_49_T_1, UInt<6>("h31")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_49_T_3 = and(io_push, _next_value_49_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_50 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_50) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_49 = mux(io_pop, entries_50, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_49_T_4 = mux(_next_value_49_T_3, io_data_in, not_pushed_49) @[ShiftRegisterFifo.scala 33:16]
    node next_value_49 = _next_value_49_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_49 = mux(_entries_T_149, next_value_49, entries_49) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_150 = eq(count, UInt<6>("h32")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_151 = and(io_push, _entries_T_150) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_152 = or(io_pop, _entries_T_151) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_50_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_50_T_1 = tail(_next_value_50_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_50_T_2 = eq(_next_value_50_T_1, UInt<6>("h32")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_50_T_3 = and(io_push, _next_value_50_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_51 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_51) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_50 = mux(io_pop, entries_51, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_50_T_4 = mux(_next_value_50_T_3, io_data_in, not_pushed_50) @[ShiftRegisterFifo.scala 33:16]
    node next_value_50 = _next_value_50_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_50 = mux(_entries_T_152, next_value_50, entries_50) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_153 = eq(count, UInt<6>("h33")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_154 = and(io_push, _entries_T_153) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_155 = or(io_pop, _entries_T_154) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_51_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_51_T_1 = tail(_next_value_51_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_51_T_2 = eq(_next_value_51_T_1, UInt<6>("h33")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_51_T_3 = and(io_push, _next_value_51_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_52 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_52) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_51 = mux(io_pop, entries_52, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_51_T_4 = mux(_next_value_51_T_3, io_data_in, not_pushed_51) @[ShiftRegisterFifo.scala 33:16]
    node next_value_51 = _next_value_51_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_51 = mux(_entries_T_155, next_value_51, entries_51) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_156 = eq(count, UInt<6>("h34")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_157 = and(io_push, _entries_T_156) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_158 = or(io_pop, _entries_T_157) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_52_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_52_T_1 = tail(_next_value_52_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_52_T_2 = eq(_next_value_52_T_1, UInt<6>("h34")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_52_T_3 = and(io_push, _next_value_52_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_53 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_53) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_52 = mux(io_pop, entries_53, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_52_T_4 = mux(_next_value_52_T_3, io_data_in, not_pushed_52) @[ShiftRegisterFifo.scala 33:16]
    node next_value_52 = _next_value_52_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_52 = mux(_entries_T_158, next_value_52, entries_52) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_159 = eq(count, UInt<6>("h35")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_160 = and(io_push, _entries_T_159) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_161 = or(io_pop, _entries_T_160) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_53_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_53_T_1 = tail(_next_value_53_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_53_T_2 = eq(_next_value_53_T_1, UInt<6>("h35")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_53_T_3 = and(io_push, _next_value_53_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_54 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_54) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_53 = mux(io_pop, entries_54, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_53_T_4 = mux(_next_value_53_T_3, io_data_in, not_pushed_53) @[ShiftRegisterFifo.scala 33:16]
    node next_value_53 = _next_value_53_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_53 = mux(_entries_T_161, next_value_53, entries_53) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_162 = eq(count, UInt<6>("h36")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_163 = and(io_push, _entries_T_162) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_164 = or(io_pop, _entries_T_163) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_54_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_54_T_1 = tail(_next_value_54_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_54_T_2 = eq(_next_value_54_T_1, UInt<6>("h36")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_54_T_3 = and(io_push, _next_value_54_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_55 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_55) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_54 = mux(io_pop, entries_55, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_54_T_4 = mux(_next_value_54_T_3, io_data_in, not_pushed_54) @[ShiftRegisterFifo.scala 33:16]
    node next_value_54 = _next_value_54_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_54 = mux(_entries_T_164, next_value_54, entries_54) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_165 = eq(count, UInt<6>("h37")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_166 = and(io_push, _entries_T_165) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_167 = or(io_pop, _entries_T_166) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_55_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_55_T_1 = tail(_next_value_55_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_55_T_2 = eq(_next_value_55_T_1, UInt<6>("h37")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_55_T_3 = and(io_push, _next_value_55_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_56 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_56) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_55 = mux(io_pop, entries_56, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_55_T_4 = mux(_next_value_55_T_3, io_data_in, not_pushed_55) @[ShiftRegisterFifo.scala 33:16]
    node next_value_55 = _next_value_55_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_55 = mux(_entries_T_167, next_value_55, entries_55) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_168 = eq(count, UInt<6>("h38")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_169 = and(io_push, _entries_T_168) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_170 = or(io_pop, _entries_T_169) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_56_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_56_T_1 = tail(_next_value_56_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_56_T_2 = eq(_next_value_56_T_1, UInt<6>("h38")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_56_T_3 = and(io_push, _next_value_56_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_57 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_57) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_56 = mux(io_pop, entries_57, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_56_T_4 = mux(_next_value_56_T_3, io_data_in, not_pushed_56) @[ShiftRegisterFifo.scala 33:16]
    node next_value_56 = _next_value_56_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_56 = mux(_entries_T_170, next_value_56, entries_56) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_171 = eq(count, UInt<6>("h39")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_172 = and(io_push, _entries_T_171) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_173 = or(io_pop, _entries_T_172) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_57_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_57_T_1 = tail(_next_value_57_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_57_T_2 = eq(_next_value_57_T_1, UInt<6>("h39")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_57_T_3 = and(io_push, _next_value_57_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_58 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_58) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_57 = mux(io_pop, entries_58, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_57_T_4 = mux(_next_value_57_T_3, io_data_in, not_pushed_57) @[ShiftRegisterFifo.scala 33:16]
    node next_value_57 = _next_value_57_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_57 = mux(_entries_T_173, next_value_57, entries_57) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_174 = eq(count, UInt<6>("h3a")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_175 = and(io_push, _entries_T_174) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_176 = or(io_pop, _entries_T_175) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_58_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_58_T_1 = tail(_next_value_58_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_58_T_2 = eq(_next_value_58_T_1, UInt<6>("h3a")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_58_T_3 = and(io_push, _next_value_58_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_59 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_59) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_58 = mux(io_pop, entries_59, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_58_T_4 = mux(_next_value_58_T_3, io_data_in, not_pushed_58) @[ShiftRegisterFifo.scala 33:16]
    node next_value_58 = _next_value_58_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_58 = mux(_entries_T_176, next_value_58, entries_58) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_177 = eq(count, UInt<6>("h3b")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_178 = and(io_push, _entries_T_177) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_179 = or(io_pop, _entries_T_178) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_59_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_59_T_1 = tail(_next_value_59_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_59_T_2 = eq(_next_value_59_T_1, UInt<6>("h3b")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_59_T_3 = and(io_push, _next_value_59_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_60 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_60) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_59 = mux(io_pop, entries_60, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_59_T_4 = mux(_next_value_59_T_3, io_data_in, not_pushed_59) @[ShiftRegisterFifo.scala 33:16]
    node next_value_59 = _next_value_59_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_59 = mux(_entries_T_179, next_value_59, entries_59) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_180 = eq(count, UInt<6>("h3c")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_181 = and(io_push, _entries_T_180) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_182 = or(io_pop, _entries_T_181) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_60_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_60_T_1 = tail(_next_value_60_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_60_T_2 = eq(_next_value_60_T_1, UInt<6>("h3c")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_60_T_3 = and(io_push, _next_value_60_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_61 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_61) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_60 = mux(io_pop, entries_61, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_60_T_4 = mux(_next_value_60_T_3, io_data_in, not_pushed_60) @[ShiftRegisterFifo.scala 33:16]
    node next_value_60 = _next_value_60_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_60 = mux(_entries_T_182, next_value_60, entries_60) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_183 = eq(count, UInt<6>("h3d")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_184 = and(io_push, _entries_T_183) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_185 = or(io_pop, _entries_T_184) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_61_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_61_T_1 = tail(_next_value_61_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_61_T_2 = eq(_next_value_61_T_1, UInt<6>("h3d")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_61_T_3 = and(io_push, _next_value_61_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_62 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_62) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_61 = mux(io_pop, entries_62, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_61_T_4 = mux(_next_value_61_T_3, io_data_in, not_pushed_61) @[ShiftRegisterFifo.scala 33:16]
    node next_value_61 = _next_value_61_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_61 = mux(_entries_T_185, next_value_61, entries_61) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_186 = eq(count, UInt<6>("h3e")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_187 = and(io_push, _entries_T_186) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_188 = or(io_pop, _entries_T_187) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_62_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_62_T_1 = tail(_next_value_62_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_62_T_2 = eq(_next_value_62_T_1, UInt<6>("h3e")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_62_T_3 = and(io_push, _next_value_62_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_63 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_63) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_62 = mux(io_pop, entries_63, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_62_T_4 = mux(_next_value_62_T_3, io_data_in, not_pushed_62) @[ShiftRegisterFifo.scala 33:16]
    node next_value_62 = _next_value_62_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_62 = mux(_entries_T_188, next_value_62, entries_62) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_189 = eq(count, UInt<6>("h3f")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_190 = and(io_push, _entries_T_189) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_191 = or(io_pop, _entries_T_190) @[ShiftRegisterFifo.scala 23:17]
    node next_value_63 = validif(UInt<1>("h0"), UInt<64>("h0"))
    node _GEN_63 = mux(_entries_T_191, next_value_63, entries_63) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    io_full <= _io_full_T @[ShiftRegisterFifo.scala 18:11]
    io_empty <= _io_empty_T @[ShiftRegisterFifo.scala 17:12]
    io_data_out <= entries_0 @[ShiftRegisterFifo.scala 36:15]
    count <= mux(reset, UInt<7>("h0"), _count_T_3) @[ShiftRegisterFifo.scala 14:{22,22} 15:9]
    entries_0 <= mux(reset, UInt<64>("h0"), _GEN_0) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_1 <= mux(reset, UInt<64>("h0"), _GEN_1) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_2 <= mux(reset, UInt<64>("h0"), _GEN_2) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_3 <= mux(reset, UInt<64>("h0"), _GEN_3) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_4 <= mux(reset, UInt<64>("h0"), _GEN_4) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_5 <= mux(reset, UInt<64>("h0"), _GEN_5) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_6 <= mux(reset, UInt<64>("h0"), _GEN_6) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_7 <= mux(reset, UInt<64>("h0"), _GEN_7) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_8 <= mux(reset, UInt<64>("h0"), _GEN_8) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_9 <= mux(reset, UInt<64>("h0"), _GEN_9) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_10 <= mux(reset, UInt<64>("h0"), _GEN_10) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_11 <= mux(reset, UInt<64>("h0"), _GEN_11) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_12 <= mux(reset, UInt<64>("h0"), _GEN_12) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_13 <= mux(reset, UInt<64>("h0"), _GEN_13) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_14 <= mux(reset, UInt<64>("h0"), _GEN_14) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_15 <= mux(reset, UInt<64>("h0"), _GEN_15) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_16 <= mux(reset, UInt<64>("h0"), _GEN_16) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_17 <= mux(reset, UInt<64>("h0"), _GEN_17) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_18 <= mux(reset, UInt<64>("h0"), _GEN_18) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_19 <= mux(reset, UInt<64>("h0"), _GEN_19) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_20 <= mux(reset, UInt<64>("h0"), _GEN_20) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_21 <= mux(reset, UInt<64>("h0"), _GEN_21) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_22 <= mux(reset, UInt<64>("h0"), _GEN_22) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_23 <= mux(reset, UInt<64>("h0"), _GEN_23) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_24 <= mux(reset, UInt<64>("h0"), _GEN_24) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_25 <= mux(reset, UInt<64>("h0"), _GEN_25) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_26 <= mux(reset, UInt<64>("h0"), _GEN_26) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_27 <= mux(reset, UInt<64>("h0"), _GEN_27) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_28 <= mux(reset, UInt<64>("h0"), _GEN_28) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_29 <= mux(reset, UInt<64>("h0"), _GEN_29) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_30 <= mux(reset, UInt<64>("h0"), _GEN_30) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_31 <= mux(reset, UInt<64>("h0"), _GEN_31) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_32 <= mux(reset, UInt<64>("h0"), _GEN_32) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_33 <= mux(reset, UInt<64>("h0"), _GEN_33) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_34 <= mux(reset, UInt<64>("h0"), _GEN_34) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_35 <= mux(reset, UInt<64>("h0"), _GEN_35) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_36 <= mux(reset, UInt<64>("h0"), _GEN_36) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_37 <= mux(reset, UInt<64>("h0"), _GEN_37) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_38 <= mux(reset, UInt<64>("h0"), _GEN_38) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_39 <= mux(reset, UInt<64>("h0"), _GEN_39) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_40 <= mux(reset, UInt<64>("h0"), _GEN_40) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_41 <= mux(reset, UInt<64>("h0"), _GEN_41) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_42 <= mux(reset, UInt<64>("h0"), _GEN_42) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_43 <= mux(reset, UInt<64>("h0"), _GEN_43) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_44 <= mux(reset, UInt<64>("h0"), _GEN_44) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_45 <= mux(reset, UInt<64>("h0"), _GEN_45) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_46 <= mux(reset, UInt<64>("h0"), _GEN_46) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_47 <= mux(reset, UInt<64>("h0"), _GEN_47) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_48 <= mux(reset, UInt<64>("h0"), _GEN_48) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_49 <= mux(reset, UInt<64>("h0"), _GEN_49) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_50 <= mux(reset, UInt<64>("h0"), _GEN_50) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_51 <= mux(reset, UInt<64>("h0"), _GEN_51) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_52 <= mux(reset, UInt<64>("h0"), _GEN_52) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_53 <= mux(reset, UInt<64>("h0"), _GEN_53) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_54 <= mux(reset, UInt<64>("h0"), _GEN_54) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_55 <= mux(reset, UInt<64>("h0"), _GEN_55) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_56 <= mux(reset, UInt<64>("h0"), _GEN_56) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_57 <= mux(reset, UInt<64>("h0"), _GEN_57) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_58 <= mux(reset, UInt<64>("h0"), _GEN_58) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_59 <= mux(reset, UInt<64>("h0"), _GEN_59) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_60 <= mux(reset, UInt<64>("h0"), _GEN_60) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_61 <= mux(reset, UInt<64>("h0"), _GEN_61) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_62 <= mux(reset, UInt<64>("h0"), _GEN_62) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_63 <= mux(reset, UInt<64>("h0"), _GEN_63) @[ShiftRegisterFifo.scala 22:{22,22}]
