FifoFormalHarness
input reset : bv<1>
input enq_valid : bv<1>
input enq_bits : bv<64>
input deq_ready : bv<1>
input startTracking : bv<1>
input dut_next_value_3_invalid : bv<64>
node dut_io_full : bv<1> = ugeq(dut_count, 3'b100)
output enq_ready : bv<1> = not(dut_io_full)
node dut_io_push : bv<1> = and(enq_ready, enq_valid)
node dut__count_T : bv<4> = add(zext(dut_count, 1), zext(dut_io_push, 3))
node dut__count_T_1 : bv<3> = dut__count_T[2:0]
node dut_io_empty : bv<1> = eq(dut_count, zext(1'b0, 2))
output deq_valid : bv<1> = not(dut_io_empty)
node dut_io_pop : bv<1> = and(deq_ready, deq_valid)
node dut__count_T_2 : bv<4> = sub(zext(dut__count_T_1, 1), zext(dut_io_pop, 3))
node dut__count_T_3 : bv<3> = dut__count_T_2[2:0]
node dut__io_empty_T : bv<1> = eq(dut_count, zext(1'b0, 2))
node dut__entries_T_1 : bv<1> = and(dut_io_push, dut__io_empty_T)
node dut__entries_T_2 : bv<1> = or(dut_io_pop, dut__entries_T_1)
node dut__next_value_0_T : bv<4> = sub(zext(dut_count, 1), zext(dut_io_pop, 3))
node dut__next_value_0_T_1 : bv<3> = dut__next_value_0_T[2:0]
node dut__next_value_0_T_2 : bv<1> = eq(dut__next_value_0_T_1, zext(1'b0, 2))
node dut__next_value_0_T_3 : bv<1> = and(dut_io_push, dut__next_value_0_T_2)
node dut_not_pushed : bv<64> = ite(dut_io_pop, dut_entries_1, zext(1'b0, 63))
node dut_io_data_in : bv<64> = enq_bits
node dut_next_value_0 : bv<64> = ite(dut__next_value_0_T_3, dut_io_data_in, dut_not_pushed)
node dut__GEN_0 : bv<64> = ite(dut__entries_T_2, dut_next_value_0, dut_entries_0)
node dut__entries_T_3 : bv<1> = eq(dut_count, zext(1'b1, 2))
node dut__entries_T_4 : bv<1> = and(dut_io_push, dut__entries_T_3)
node dut__entries_T_5 : bv<1> = or(dut_io_pop, dut__entries_T_4)
node dut__next_value_1_T_2 : bv<1> = eq(dut__next_value_0_T_1, zext(1'b1, 2))
node dut__next_value_1_T_3 : bv<1> = and(dut_io_push, dut__next_value_1_T_2)
node dut_not_pushed_1 : bv<64> = ite(dut_io_pop, dut_entries_2, zext(1'b0, 63))
node dut_next_value_1 : bv<64> = ite(dut__next_value_1_T_3, dut_io_data_in, dut_not_pushed_1)
node dut__GEN_1 : bv<64> = ite(dut__entries_T_5, dut_next_value_1, dut_entries_1)
node dut__entries_T_6 : bv<1> = eq(dut_count, zext(2'b10, 1))
node dut__entries_T_7 : bv<1> = and(dut_io_push, dut__entries_T_6)
node dut__entries_T_8 : bv<1> = or(dut_io_pop, dut__entries_T_7)
node dut__next_value_2_T_2 : bv<1> = eq(dut__next_value_0_T_1, zext(2'b10, 1))
node dut__next_value_2_T_3 : bv<1> = and(dut_io_push, dut__next_value_2_T_2)
node dut_not_pushed_2 : bv<64> = ite(dut_io_pop, dut_entries_3, zext(1'b0, 63))
node dut_next_value_2 : bv<64> = ite(dut__next_value_2_T_3, dut_io_data_in, dut_not_pushed_2)
node dut__GEN_2 : bv<64> = ite(dut__entries_T_8, dut_next_value_2, dut_entries_2)
node dut__entries_T_9 : bv<1> = eq(dut_count, zext(2'b11, 1))
node dut__entries_T_10 : bv<1> = and(dut_io_push, dut__entries_T_9)
node dut__entries_T_11 : bv<1> = or(dut_io_pop, dut__entries_T_10)
output dut_next_value_3_invalid.en : bv<1> = 1'b1
node dut__GEN_3 : bv<64> = ite(dut__entries_T_11, dut_next_value_3_invalid, dut_entries_3)
node dut_io_data_out : bv<64> = dut_entries_0
node tracker_deq_valid : bv<1> = and(deq_ready, deq_valid)
node tracker__nextElementCount_T : bv<1> = not(tracker_deq_valid)
node tracker_enq_valid : bv<1> = and(enq_ready, enq_valid)
node tracker__nextElementCount_T_1 : bv<1> = and(tracker_enq_valid, tracker__nextElementCount_T)
node tracker__nextElementCount_T_2 : bv<5> = add(zext(tracker_elementCount, 1), zext(1'b1, 4))
node tracker__nextElementCount_T_3 : bv<4> = tracker__nextElementCount_T_2[3:0]
node tracker__nextElementCount_T_4 : bv<1> = not(tracker_enq_valid)
node tracker__nextElementCount_T_5 : bv<1> = and(tracker__nextElementCount_T_4, tracker_deq_valid)
node tracker__nextElementCount_T_6 : bv<5> = sub(zext(tracker_elementCount, 1), zext(1'b1, 4))
node tracker__nextElementCount_T_7 : bv<4> = tracker__nextElementCount_T_6[3:0]
node tracker__nextElementCount_T_8 : bv<4> = ite(tracker__nextElementCount_T_5, tracker__nextElementCount_T_7, tracker_elementCount)
node tracker_nextElementCount : bv<4> = ite(tracker__nextElementCount_T_1, tracker__nextElementCount_T_3, tracker__nextElementCount_T_8)
node tracker__T : bv<1> = not(tracker_isActive)
node tracker__T_1 : bv<1> = and(tracker__T, tracker_enq_valid)
node tracker_startTracking : bv<1> = startTracking
node tracker__T_2 : bv<1> = and(tracker__T_1, tracker_startTracking)
node tracker__T_3 : bv<1> = eq(tracker_elementCount, zext(1'b0, 3))
node tracker__T_4 : bv<1> = and(tracker_deq_valid, tracker__T_3)
node tracker_enq_bits : bv<64> = enq_bits
output deq_bits : bv<64> = dut_io_data_out
node tracker_deq_bits : bv<64> = deq_bits
node tracker__T_5 : bv<1> = eq(tracker_enq_bits, tracker_deq_bits)
node tracker_reset : bv<1> = reset
node tracker__T_7 : bv<1> = not(tracker_reset)
node tracker__T_8 : bv<1> = not(tracker__T_5)
node tracker__GEN_0 : bv<1> = ite(tracker__T_4, tracker_isActive, 1'b1)
node tracker__GEN_1 : bv<64> = ite(tracker__T_4, tracker_packetValue, tracker_enq_bits)
node tracker__GEN_2 : bv<4> = ite(tracker__T_4, tracker_packetCount, tracker_nextElementCount)
node tracker__GEN_3 : bv<1> = ite(tracker__T_2, tracker__GEN_0, tracker_isActive)
node tracker__GEN_5 : bv<4> = ite(tracker__T_2, tracker__GEN_2, tracker_packetCount)
node tracker__T_9 : bv<1> = and(tracker_isActive, tracker_deq_valid)
node tracker__packetCount_T : bv<5> = sub(zext(tracker_packetCount, 1), zext(1'b1, 4))
node tracker__packetCount_T_1 : bv<4> = tracker__packetCount_T[3:0]
node tracker__T_10 : bv<1> = eq(tracker_packetCount, zext(1'b1, 3))
node tracker__T_11 : bv<1> = eq(tracker_packetValue, tracker_deq_bits)
node tracker__T_14 : bv<1> = not(tracker__T_11)
node tracker__GEN_6 : bv<1> = ite(tracker__T_10, 1'b0, tracker__GEN_3)
node tracker__GEN_8 : bv<1> = ite(tracker__T_9, tracker__GEN_6, tracker__GEN_3)
node tracker__T_15 : bv<1> = eq(tracker_elementCount, 4'b1000)
node tracker__T_16 : bv<1> = not(tracker__nextElementCount_T_1)
node tracker__T_19 : bv<1> = not(tracker__T_16)
bad tracker_assert : bv<1> = not(implies(and(and(tracker__T_2, tracker__T_4), tracker__T_7), tracker__T_5))
bad tracker_assert_1 : bv<1> = not(implies(and(and(tracker__T_9, tracker__T_10), tracker__T_7), tracker__T_11))
bad tracker_assert_2 : bv<1> = not(implies(and(tracker__T_15, tracker__T_7), tracker__T_16))
node _resetPhase : bv<1> = not(ugeq(_resetCount, 1'b1))
node dut_reset : bv<1> = reset
constraint _resetActive : bv<1> = implies(_resetPhase, reset)
state dut_count : bv<3>
  [next] ite(dut_reset, 3'b0, dut__count_T_3)
state dut_entries_0 : bv<64>
  [next] ite(dut_reset, 64'x0, dut__GEN_0)
state dut_entries_1 : bv<64>
  [next] ite(dut_reset, 64'x0, dut__GEN_1)
state dut_entries_2 : bv<64>
  [next] ite(dut_reset, 64'x0, dut__GEN_2)
state dut_entries_3 : bv<64>
  [next] ite(dut_reset, 64'x0, dut__GEN_3)
state tracker_elementCount : bv<4>
  [next] ite(tracker_reset, 4'b0, tracker_nextElementCount)
state tracker_isActive : bv<1>
  [next] ite(tracker_reset, 1'b0, tracker__GEN_8)
state tracker_packetValue : bv<64>
  [next] ite(tracker__T_2, tracker__GEN_1, tracker_packetValue)
state tracker_packetCount : bv<4>
  [next] ite(tracker__T_9, tracker__packetCount_T_1, tracker__GEN_5)
state _resetCount : bv<1>
  [init] 1'b0
  [next] ite(_resetPhase, add(zext(_resetCount, 1), zext(1'b1, 1))[0], _resetCount)