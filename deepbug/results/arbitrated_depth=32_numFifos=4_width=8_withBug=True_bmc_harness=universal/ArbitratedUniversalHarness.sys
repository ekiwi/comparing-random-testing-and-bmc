ArbitratedUniversalHarness
input reset : bv<1>
input tryPush_0 : bv<1>
input tryPush_1 : bv<1>
input tryPush_2 : bv<1>
input tryPush_3 : bv<1>
input fifoDataIn_0 : bv<8>
input fifoDataIn_1 : bv<8>
input fifoDataIn_2 : bv<8>
input fifoDataIn_3 : bv<8>
input tryReq : bv<1>
input selectShift : bv<2>
input queues_0__GEN_0_invalid : bv<6>
input queues_0__GEN_3_invalid : bv<1>
input queues_0__GEN_4_invalid : bv<8>
input queues_1__GEN_0_invalid : bv<6>
input queues_1__GEN_3_invalid : bv<1>
input queues_1__GEN_4_invalid : bv<8>
input queues_2__GEN_0_invalid : bv<6>
input queues_2__GEN_3_invalid : bv<1>
input queues_2__GEN_4_invalid : bv<8>
input queues_3__GEN_0_invalid : bv<6>
input queues_3__GEN_3_invalid : bv<1>
input queues_3__GEN_4_invalid : bv<8>
node dut_fifo_entries.input_data_MPORT.addr : bv<5> = dut_fifo_wrPtr
node dut_fifo_entries.input_data_MPORT.data : bv<8> = dut_fifo_entries[dut_fifo_entries.input_data_MPORT.addr]
node dut_fifo_entries.io_data_out_MPORT.addr : bv<5> = dut_fifo_rdPtr
node dut_fifo_entries.io_data_out_MPORT.data : bv<8> = dut_fifo_entries[dut_fifo_entries.io_data_out_MPORT.addr]
node dut_cc_has_credits : bv<1> = ugt(dut_cc_credits, zext(1'b0, 5))
node dut_has_credit_0 : bv<1> = dut_cc_has_credits
node dut_io_push_0 : bv<1> = and(tryPush_0, dut_has_credit_0)
node dut_fifo_io_push : bv<1> = dut_io_push_0
node dut_fifo__cnt_T : bv<7> = add(zext(dut_fifo_cnt, 1), zext(dut_fifo_io_push, 6))
node dut_fifo__cnt_T_1 : bv<6> = dut_fifo__cnt_T[5:0]
node dut_fifo_3_io_empty : bv<1> = eq(dut_fifo_3_cnt, zext(1'b0, 5))
node dut_empty_3 : bv<1> = dut_fifo_3_io_empty
node dut_fifo_2_io_empty : bv<1> = eq(dut_fifo_2_cnt, zext(1'b0, 5))
node dut_empty_2 : bv<1> = dut_fifo_2_io_empty
node available_hi : bv<2> = concat(dut_empty_3, dut_empty_2)
node dut_fifo_1_io_empty : bv<1> = eq(dut_fifo_1_cnt, zext(1'b0, 5))
node dut_empty_1 : bv<1> = dut_fifo_1_io_empty
node dut_fifo_io_empty : bv<1> = eq(dut_fifo_cnt, zext(1'b0, 5))
node dut_empty_0 : bv<1> = dut_fifo_io_empty
node available_lo : bv<2> = concat(dut_empty_1, dut_empty_0)
node _available_T : bv<4> = concat(available_hi, available_lo)
node _available_T_1 : bv<4> = not(_available_T)
node dut_cc_3_creditIsMax : bv<1> = eq(dut_cc_3_credits, 6'b100000)
node dut_creditIsMax_3 : bv<1> = dut_cc_3_creditIsMax
node dut_cc_2_creditIsMax : bv<1> = eq(dut_cc_2_credits, 6'b100000)
node dut_creditIsMax_2 : bv<1> = dut_cc_2_creditIsMax
node available_hi_1 : bv<2> = concat(dut_creditIsMax_3, dut_creditIsMax_2)
node dut_cc_1_creditIsMax : bv<1> = eq(dut_cc_1_credits, 6'b100000)
node dut_creditIsMax_1 : bv<1> = dut_cc_1_creditIsMax
node dut_cc_creditIsMax : bv<1> = eq(dut_cc_credits, 6'b100000)
node dut_creditIsMax_0 : bv<1> = dut_cc_creditIsMax
node available_lo_1 : bv<2> = concat(dut_creditIsMax_1, dut_creditIsMax_0)
node _available_T_2 : bv<4> = concat(available_hi_1, available_lo_1)
node _available_T_3 : bv<4> = not(_available_T_2)
node available : bv<4> = and(_available_T_1, _available_T_3)
node _dut_io_req_T : bv<1> = not(eq(available, zext(1'b0, 3)))
node dut_io_req : bv<1> = and(tryReq, _dut_io_req_T)
node _availableRotated_T_1 : bv<1> = selectShift[1]
node _availableRotated_T : bv<1> = selectShift[0]
node _availableRotated_T_2 : bv<3> = available[2:0]
node _availableRotated_T_3 : bv<1> = available[3]
node _availableRotated_T_4 : bv<4> = concat(_availableRotated_T_2, _availableRotated_T_3)
node _availableRotated_T_5 : bv<4> = ite(_availableRotated_T, _availableRotated_T_4, available)
node _availableRotated_T_6 : bv<2> = _availableRotated_T_5[1:0]
node _availableRotated_T_7 : bv<2> = _availableRotated_T_5[3:2]
node _availableRotated_T_8 : bv<4> = concat(_availableRotated_T_6, _availableRotated_T_7)
node availableRotated : bv<4> = ite(_availableRotated_T_1, _availableRotated_T_8, _availableRotated_T_5)
node _availableRotatedOH_T : bv<1> = availableRotated[0]
node _availableRotatedOH_T_1 : bv<1> = availableRotated[1]
node _availableRotatedOH_T_2 : bv<1> = availableRotated[2]
node _availableRotatedOH_T_3 : bv<1> = availableRotated[3]
node _availableRotatedOH_T_4 : bv<4> = ite(_availableRotatedOH_T_3, 4'b1000, 4'b0)
node _availableRotatedOH_T_5 : bv<4> = ite(_availableRotatedOH_T_2, 4'b100, _availableRotatedOH_T_4)
node _availableRotatedOH_T_6 : bv<4> = ite(_availableRotatedOH_T_1, 4'b10, _availableRotatedOH_T_5)
node availableRotatedOH : bv<4> = ite(_availableRotatedOH_T, 4'b1, _availableRotatedOH_T_6)
node _select_T_2 : bv<1> = availableRotatedOH[0]
node _select_T_3 : bv<3> = availableRotatedOH[3:1]
node _select_T_4 : bv<4> = concat(_select_T_2, _select_T_3)
node _select_T_5 : bv<4> = ite(_availableRotated_T, _select_T_4, availableRotatedOH)
node _select_T_6 : bv<2> = _select_T_5[1:0]
node _select_T_7 : bv<2> = _select_T_5[3:2]
node _select_T_8 : bv<4> = concat(_select_T_6, _select_T_7)
node select : bv<4> = ite(_availableRotated_T_1, _select_T_8, _select_T_5)
node dut_io_gnt_sel_hi : bv<2> = select[3:2]
node _dut_io_gnt_sel_T : bv<1> = redor(dut_io_gnt_sel_hi)
node dut_io_gnt_sel_lo : bv<2> = select[1:0]
node _dut_io_gnt_sel_T_1 : bv<2> = or(dut_io_gnt_sel_hi, dut_io_gnt_sel_lo)
node _dut_io_gnt_sel_T_2 : bv<1> = _dut_io_gnt_sel_T_1[1]
node dut_io_gnt_sel : bv<2> = concat(_dut_io_gnt_sel_T, _dut_io_gnt_sel_T_2)
node dut__io_gnt_0_T : bv<1> = eq(dut_io_gnt_sel, zext(1'b0, 1))
node dut_io_gnt_0 : bv<1> = and(dut_io_req, dut__io_gnt_0_T)
node dut_fifo_io_pop : bv<1> = dut_io_gnt_0
node dut_fifo__cnt_T_2 : bv<7> = sub(zext(dut_fifo__cnt_T_1, 1), zext(dut_fifo_io_pop, 6))
node dut_fifo__cnt_T_3 : bv<6> = dut_fifo__cnt_T_2[5:0]
node dut_fifo__wrPtr_T : bv<6> = add(zext(dut_fifo_wrPtr, 1), zext(dut_fifo_io_push, 5))
node dut_fifo__wrPtr_T_1 : bv<5> = dut_fifo__wrPtr_T[4:0]
node dut_fifo__rdPtr_T : bv<6> = add(zext(dut_fifo_rdPtr, 1), zext(dut_fifo_io_pop, 5))
node dut_fifo__rdPtr_T_1 : bv<5> = dut_fifo__rdPtr_T[4:0]
node dut_fifo_io_data_out : bv<8> = dut_fifo_entries.io_data_out_MPORT.data
node dut_fifo_entries.input_data_MPORT.en : bv<1> = 1'b1
node dut_fifo_entries.io_data_out_MPORT.en : bv<1> = 1'b1
node dut_fifo_entries.MPORT.en : bv<1> = 1'b1
node dut_fifo_entries.MPORT.addr : bv<5> = dut_fifo_wrPtr
node dut_fifo_entries.MPORT.mask : bv<1> = 1'b1
node dut_io_data_in_0 : bv<8> = fifoDataIn_0
node dut_fifo_io_data_in : bv<8> = dut_io_data_in_0
node dut_fifo_entries.MPORT.data : bv<8> = ite(dut_fifo_io_push, dut_fifo_io_data_in, dut_fifo_entries.input_data_MPORT.data)
node dut_cc_inc : bv<1> = dut_io_gnt_0
node dut_cc__credits_T : bv<7> = add(zext(dut_cc_credits, 1), zext(dut_cc_inc, 6))
node dut_cc__credits_T_1 : bv<6> = dut_cc__credits_T[5:0]
node dut_cc_dec : bv<1> = dut_io_push_0
node dut_cc__credits_T_2 : bv<7> = sub(zext(dut_cc__credits_T_1, 1), zext(dut_cc_dec, 6))
node dut_cc__credits_T_3 : bv<6> = dut_cc__credits_T_2[5:0]
node dut_cc__T : bv<1> = not(eq(dut_cc_credits, 6'b100000))
node dut_cc__T_1 : bv<1> = not(dut_cc_inc)
node dut_cc__T_2 : bv<1> = or(dut_cc__T, dut_cc__T_1)
node dut_reset : bv<1> = reset
node dut_cc_reset : bv<1> = dut_reset
node dut_cc__T_4 : bv<1> = not(dut_cc_reset)
node dut_cc__T_5 : bv<1> = not(dut_cc__T_2)
constraint dut_cc_assume : bv<1> = implies(dut_cc__T_4, dut_cc__T_2)
node dut_fifo_1_entries.input_data_MPORT.addr : bv<5> = dut_fifo_1_wrPtr
node dut_fifo_1_entries.input_data_MPORT.data : bv<8> = dut_fifo_1_entries[dut_fifo_1_entries.input_data_MPORT.addr]
node dut_fifo_1_entries.io_data_out_MPORT.addr : bv<5> = dut_fifo_1_rdPtr
node dut_fifo_1_entries.io_data_out_MPORT.data : bv<8> = dut_fifo_1_entries[dut_fifo_1_entries.io_data_out_MPORT.addr]
node dut_cc_1_has_credits : bv<1> = ugt(dut_cc_1_credits, zext(1'b0, 5))
node dut_has_credit_1 : bv<1> = dut_cc_1_has_credits
node dut_io_push_1 : bv<1> = and(tryPush_1, dut_has_credit_1)
node dut_fifo_1_io_push : bv<1> = dut_io_push_1
node dut_fifo_1__cnt_T : bv<7> = add(zext(dut_fifo_1_cnt, 1), zext(dut_fifo_1_io_push, 6))
node dut_fifo_1__cnt_T_1 : bv<6> = dut_fifo_1__cnt_T[5:0]
node dut__io_gnt_1_T : bv<1> = eq(dut_io_gnt_sel, zext(1'b1, 1))
node dut_io_gnt_1 : bv<1> = and(dut_io_req, dut__io_gnt_1_T)
node dut_fifo_1_io_pop : bv<1> = dut_io_gnt_1
node dut_fifo_1__cnt_T_2 : bv<7> = sub(zext(dut_fifo_1__cnt_T_1, 1), zext(dut_fifo_1_io_pop, 6))
node dut_fifo_1__cnt_T_3 : bv<6> = dut_fifo_1__cnt_T_2[5:0]
node dut_fifo_1__wrPtr_T : bv<6> = add(zext(dut_fifo_1_wrPtr, 1), zext(dut_fifo_1_io_push, 5))
node dut_fifo_1__wrPtr_T_1 : bv<5> = dut_fifo_1__wrPtr_T[4:0]
node dut_fifo_1__rdPtr_T : bv<6> = add(zext(dut_fifo_1_rdPtr, 1), zext(dut_fifo_1_io_pop, 5))
node dut_fifo_1__rdPtr_T_1 : bv<5> = dut_fifo_1__rdPtr_T[4:0]
node dut_fifo_1_io_data_out : bv<8> = dut_fifo_1_entries.io_data_out_MPORT.data
node dut_fifo_1_entries.input_data_MPORT.en : bv<1> = 1'b1
node dut_fifo_1_entries.io_data_out_MPORT.en : bv<1> = 1'b1
node dut_fifo_1_entries.MPORT.en : bv<1> = 1'b1
node dut_fifo_1_entries.MPORT.addr : bv<5> = dut_fifo_1_wrPtr
node dut_fifo_1_entries.MPORT.mask : bv<1> = 1'b1
node dut_io_data_in_1 : bv<8> = fifoDataIn_1
node dut_fifo_1_io_data_in : bv<8> = dut_io_data_in_1
node dut_fifo_1_entries.MPORT.data : bv<8> = ite(dut_fifo_1_io_push, dut_fifo_1_io_data_in, dut_fifo_1_entries.input_data_MPORT.data)
node dut_cc_1_inc : bv<1> = dut_io_gnt_1
node dut_cc_1__credits_T : bv<7> = add(zext(dut_cc_1_credits, 1), zext(dut_cc_1_inc, 6))
node dut_cc_1__credits_T_1 : bv<6> = dut_cc_1__credits_T[5:0]
node dut_cc_1_dec : bv<1> = dut_io_push_1
node dut_cc_1__credits_T_2 : bv<7> = sub(zext(dut_cc_1__credits_T_1, 1), zext(dut_cc_1_dec, 6))
node dut_cc_1__credits_T_3 : bv<6> = dut_cc_1__credits_T_2[5:0]
node dut_cc_1__T : bv<1> = not(eq(dut_cc_1_credits, 6'b100000))
node dut_cc_1__T_1 : bv<1> = not(dut_cc_1_inc)
node dut_cc_1__T_2 : bv<1> = or(dut_cc_1__T, dut_cc_1__T_1)
node dut_cc_1_reset : bv<1> = dut_reset
node dut_cc_1__T_4 : bv<1> = not(dut_cc_1_reset)
node dut_cc_1__T_5 : bv<1> = not(dut_cc_1__T_2)
constraint dut_cc_1_assume : bv<1> = implies(dut_cc_1__T_4, dut_cc_1__T_2)
node dut_fifo_2_entries.input_data_MPORT.addr : bv<5> = dut_fifo_2_wrPtr
node dut_fifo_2_entries.input_data_MPORT.data : bv<8> = dut_fifo_2_entries[dut_fifo_2_entries.input_data_MPORT.addr]
node dut_fifo_2_entries.io_data_out_MPORT.addr : bv<5> = dut_fifo_2_rdPtr
node dut_fifo_2_entries.io_data_out_MPORT.data : bv<8> = dut_fifo_2_entries[dut_fifo_2_entries.io_data_out_MPORT.addr]
node dut_cc_2_has_credits : bv<1> = ugt(dut_cc_2_credits, zext(1'b0, 5))
node dut_has_credit_2 : bv<1> = dut_cc_2_has_credits
node dut_io_push_2 : bv<1> = and(tryPush_2, dut_has_credit_2)
node dut_fifo_2_io_push : bv<1> = dut_io_push_2
node dut_fifo_2__cnt_T : bv<7> = add(zext(dut_fifo_2_cnt, 1), zext(dut_fifo_2_io_push, 6))
node dut_fifo_2__cnt_T_1 : bv<6> = dut_fifo_2__cnt_T[5:0]
node dut__io_gnt_2_T : bv<1> = eq(dut_io_gnt_sel, 2'b10)
node dut_io_gnt_2 : bv<1> = and(dut_io_req, dut__io_gnt_2_T)
node dut_fifo_2_io_pop : bv<1> = dut_io_gnt_2
node dut_fifo_2__cnt_T_2 : bv<7> = sub(zext(dut_fifo_2__cnt_T_1, 1), zext(dut_fifo_2_io_pop, 6))
node dut_fifo_2__cnt_T_3 : bv<6> = dut_fifo_2__cnt_T_2[5:0]
node dut_fifo_2__wrPtr_T : bv<6> = add(zext(dut_fifo_2_wrPtr, 1), zext(dut_fifo_2_io_push, 5))
node dut_fifo_2__wrPtr_T_1 : bv<5> = dut_fifo_2__wrPtr_T[4:0]
node dut_fifo_2__rdPtr_T : bv<6> = add(zext(dut_fifo_2_rdPtr, 1), zext(dut_fifo_2_io_pop, 5))
node dut_fifo_2__rdPtr_T_1 : bv<5> = dut_fifo_2__rdPtr_T[4:0]
node dut_fifo_2_io_data_out : bv<8> = dut_fifo_2_entries.io_data_out_MPORT.data
node dut_fifo_2_entries.input_data_MPORT.en : bv<1> = 1'b1
node dut_fifo_2_entries.io_data_out_MPORT.en : bv<1> = 1'b1
node dut_fifo_2_entries.MPORT.en : bv<1> = 1'b1
node dut_fifo_2_entries.MPORT.addr : bv<5> = dut_fifo_2_wrPtr
node dut_fifo_2_entries.MPORT.mask : bv<1> = 1'b1
node dut_io_data_in_2 : bv<8> = fifoDataIn_2
node dut_fifo_2_io_data_in : bv<8> = dut_io_data_in_2
node dut_fifo_2_entries.MPORT.data : bv<8> = ite(dut_fifo_2_io_push, dut_fifo_2_io_data_in, dut_fifo_2_entries.input_data_MPORT.data)
node dut_cc_2_inc : bv<1> = dut_io_gnt_2
node dut_cc_2__credits_T : bv<7> = add(zext(dut_cc_2_credits, 1), zext(dut_cc_2_inc, 6))
node dut_cc_2__credits_T_1 : bv<6> = dut_cc_2__credits_T[5:0]
node dut_cc_2_dec : bv<1> = dut_io_push_2
node dut_cc_2__credits_T_2 : bv<7> = sub(zext(dut_cc_2__credits_T_1, 1), zext(dut_cc_2_dec, 6))
node dut_cc_2__credits_T_3 : bv<6> = dut_cc_2__credits_T_2[5:0]
node dut_cc_2__T : bv<1> = not(eq(dut_cc_2_credits, 6'b100000))
node dut_cc_2__T_1 : bv<1> = not(dut_cc_2_inc)
node dut_cc_2__T_2 : bv<1> = or(dut_cc_2__T, dut_cc_2__T_1)
node dut_cc_2_reset : bv<1> = dut_reset
node dut_cc_2__T_4 : bv<1> = not(dut_cc_2_reset)
node dut_cc_2__T_5 : bv<1> = not(dut_cc_2__T_2)
constraint dut_cc_2_assume : bv<1> = implies(dut_cc_2__T_4, dut_cc_2__T_2)
node dut_fifo_3_entries.input_data_MPORT.addr : bv<5> = dut_fifo_3_wrPtr
node dut_fifo_3_entries.input_data_MPORT.data : bv<8> = dut_fifo_3_entries[dut_fifo_3_entries.input_data_MPORT.addr]
node dut_fifo_3_entries.io_data_out_MPORT.addr : bv<5> = dut_fifo_3_rdPtr
node dut_fifo_3_entries.io_data_out_MPORT.data : bv<8> = dut_fifo_3_entries[dut_fifo_3_entries.io_data_out_MPORT.addr]
node dut_cc_3_has_credits : bv<1> = ugt(dut_cc_3_credits, zext(1'b0, 5))
node dut_has_credit_3 : bv<1> = dut_cc_3_has_credits
node dut_io_push_3 : bv<1> = and(tryPush_3, dut_has_credit_3)
node dut_fifo_3_io_push : bv<1> = dut_io_push_3
node dut_fifo_3__cnt_T : bv<7> = add(zext(dut_fifo_3_cnt, 1), zext(dut_fifo_3_io_push, 6))
node dut_fifo_3__cnt_T_1 : bv<6> = dut_fifo_3__cnt_T[5:0]
node dut__io_gnt_3_T : bv<1> = eq(dut_io_gnt_sel, 2'b11)
node dut_io_gnt_3 : bv<1> = and(dut_io_req, dut__io_gnt_3_T)
node dut_fifo_3_io_pop : bv<1> = dut_io_gnt_3
node dut_fifo_3__cnt_T_2 : bv<7> = sub(zext(dut_fifo_3__cnt_T_1, 1), zext(dut_fifo_3_io_pop, 6))
node dut_fifo_3__cnt_T_3 : bv<6> = dut_fifo_3__cnt_T_2[5:0]
node dut_fifo_3__wrPtr_T : bv<6> = add(zext(dut_fifo_3_wrPtr, 1), zext(dut_fifo_3_io_push, 5))
node dut_fifo_3__wrPtr_T_1 : bv<5> = dut_fifo_3__wrPtr_T[4:0]
node dut_fifo_3__rdPtr_T : bv<6> = add(zext(dut_fifo_3_rdPtr, 1), zext(dut_fifo_3_io_pop, 5))
node dut_fifo_3__rdPtr_T_1 : bv<5> = dut_fifo_3__rdPtr_T[4:0]
node dut_fifo_3_io_data_out : bv<8> = dut_fifo_3_entries.io_data_out_MPORT.data
node dut_fifo_3_entries.input_data_MPORT.en : bv<1> = 1'b1
node dut_fifo_3_entries.io_data_out_MPORT.en : bv<1> = 1'b1
node dut_fifo_3_entries.MPORT.en : bv<1> = 1'b1
node dut_fifo_3_entries.MPORT.addr : bv<5> = dut_fifo_3_wrPtr
node dut_fifo_3_entries.MPORT.mask : bv<1> = 1'b1
node dut_io_data_in_3 : bv<8> = fifoDataIn_3
node dut_fifo_3_io_data_in : bv<8> = dut_io_data_in_3
node dut_fifo_3_entries.MPORT.data : bv<8> = ite(dut_fifo_3_io_push, dut_fifo_3_io_data_in, dut_fifo_3_entries.input_data_MPORT.data)
node dut_cc_3_inc : bv<1> = dut_io_gnt_3
node dut_cc_3__credits_T : bv<7> = add(zext(dut_cc_3_credits, 1), zext(dut_cc_3_inc, 6))
node dut_cc_3__credits_T_1 : bv<6> = dut_cc_3__credits_T[5:0]
node dut_cc_3_dec : bv<1> = dut_io_push_3
node dut_cc_3__credits_T_2 : bv<7> = sub(zext(dut_cc_3__credits_T_1, 1), zext(dut_cc_3_dec, 6))
node dut_cc_3__credits_T_3 : bv<6> = dut_cc_3__credits_T_2[5:0]
node dut_cc_3__T : bv<1> = not(eq(dut_cc_3_credits, 6'b100000))
node dut_cc_3__T_1 : bv<1> = not(dut_cc_3_inc)
node dut_cc_3__T_2 : bv<1> = or(dut_cc_3__T, dut_cc_3__T_1)
node dut_cc_3_reset : bv<1> = dut_reset
node dut_cc_3__T_4 : bv<1> = not(dut_cc_3_reset)
node dut_cc_3__T_5 : bv<1> = not(dut_cc_3__T_2)
constraint dut_cc_3_assume : bv<1> = implies(dut_cc_3__T_4, dut_cc_3__T_2)
node dut_fifo_data_out_0 : bv<8> = dut_fifo_io_data_out
node dut__io_data_out_T : bv<8> = ite(dut_io_gnt_0, dut_fifo_data_out_0, zext(1'b0, 7))
node dut_fifo_data_out_1 : bv<8> = dut_fifo_1_io_data_out
node dut__io_data_out_T_1 : bv<8> = ite(dut_io_gnt_1, dut_fifo_data_out_1, zext(1'b0, 7))
node dut_fifo_data_out_2 : bv<8> = dut_fifo_2_io_data_out
node dut__io_data_out_T_2 : bv<8> = ite(dut_io_gnt_2, dut_fifo_data_out_2, zext(1'b0, 7))
node dut_fifo_data_out_3 : bv<8> = dut_fifo_3_io_data_out
node dut__io_data_out_T_3 : bv<8> = ite(dut_io_gnt_3, dut_fifo_data_out_3, zext(1'b0, 7))
node dut__io_data_out_T_4 : bv<8> = or(dut__io_data_out_T, dut__io_data_out_T_1)
node dut__io_data_out_T_5 : bv<8> = or(dut__io_data_out_T_4, dut__io_data_out_T_2)
node dut__T : bv<1> = not(dut_io_push_0)
node dut__T_1 : bv<1> = or(dut_has_credit_0, dut__T)
node dut__T_3 : bv<1> = not(dut_reset)
node dut__T_4 : bv<1> = not(dut__T_1)
node dut__T_5 : bv<1> = not(dut_empty_0)
node dut__T_6 : bv<1> = not(dut_io_gnt_0)
node dut__T_7 : bv<1> = or(dut__T_5, dut__T_6)
node dut__T_10 : bv<1> = not(dut__T_7)
node dut__T_11 : bv<1> = not(dut_io_push_1)
node dut__T_12 : bv<1> = or(dut_has_credit_1, dut__T_11)
node dut__T_15 : bv<1> = not(dut__T_12)
node dut__T_16 : bv<1> = not(dut_empty_1)
node dut__T_17 : bv<1> = not(dut_io_gnt_1)
node dut__T_18 : bv<1> = or(dut__T_16, dut__T_17)
node dut__T_21 : bv<1> = not(dut__T_18)
node dut__T_22 : bv<1> = not(dut_io_push_2)
node dut__T_23 : bv<1> = or(dut_has_credit_2, dut__T_22)
node dut__T_26 : bv<1> = not(dut__T_23)
node dut__T_27 : bv<1> = not(dut_empty_2)
node dut__T_28 : bv<1> = not(dut_io_gnt_2)
node dut__T_29 : bv<1> = or(dut__T_27, dut__T_28)
node dut__T_32 : bv<1> = not(dut__T_29)
node dut__T_33 : bv<1> = not(dut_io_push_3)
node dut__T_34 : bv<1> = or(dut_has_credit_3, dut__T_33)
node dut__T_37 : bv<1> = not(dut__T_34)
node dut__T_38 : bv<1> = not(dut_empty_3)
node dut__T_39 : bv<1> = not(dut_io_gnt_3)
node dut__T_40 : bv<1> = or(dut__T_38, dut__T_39)
node dut__T_43 : bv<1> = not(dut__T_40)
node dut_io_data_out : bv<8> = or(dut__io_data_out_T_5, dut__io_data_out_T_3)
node dut_fifo_reset : bv<1> = dut_reset
node dut_fifo_1_reset : bv<1> = dut_reset
node dut_fifo_2_reset : bv<1> = dut_reset
node dut_fifo_3_reset : bv<1> = dut_reset
constraint dut_assume : bv<1> = implies(dut__T_3, dut__T_1)
constraint dut_assume_1 : bv<1> = implies(dut__T_3, dut__T_7)
constraint dut_assume_2 : bv<1> = implies(dut__T_3, dut__T_12)
constraint dut_assume_3 : bv<1> = implies(dut__T_3, dut__T_18)
constraint dut_assume_4 : bv<1> = implies(dut__T_3, dut__T_23)
constraint dut_assume_5 : bv<1> = implies(dut__T_3, dut__T_29)
constraint dut_assume_6 : bv<1> = implies(dut__T_3, dut__T_34)
constraint dut_assume_7 : bv<1> = implies(dut__T_3, dut__T_40)
node queues_0_ram.io_deq_bits_MPORT.addr : bv<6> = queues_0_deq_ptr_value
node queues_0_ram.io_deq_bits_MPORT.data : bv<8> = queues_0_ram[queues_0_ram.io_deq_bits_MPORT.addr]
node queues_0_ptr_match : bv<1> = eq(queues_0_enq_ptr_value, queues_0_deq_ptr_value)
node queues_0__empty_T : bv<1> = not(queues_0_maybe_full)
node queues_0_empty : bv<1> = and(queues_0_ptr_match, queues_0__empty_T)
node queues_0_full : bv<1> = and(queues_0_ptr_match, queues_0_maybe_full)
node queues_0_io_deq_ready : bv<1> = and(dut_io_req, dut__io_gnt_0_T)
node queues_0__io_enq_ready_T : bv<1> = not(queues_0_full)
node queues_0_io_enq_ready : bv<1> = or(queues_0_io_deq_ready, queues_0__io_enq_ready_T)
node queues_0_io_enq_valid : bv<1> = dut_io_push_0
node queues_0__do_enq_T : bv<1> = and(queues_0_io_enq_ready, queues_0_io_enq_valid)
node queues_0__io_deq_valid_T : bv<1> = not(queues_0_empty)
node queues_0_io_deq_valid : bv<1> = or(queues_0_io_enq_valid, queues_0__io_deq_valid_T)
node queues_0__do_deq_T : bv<1> = and(queues_0_io_deq_ready, queues_0_io_deq_valid)
node queues_0__value_T : bv<7> = add(zext(queues_0_enq_ptr_value, 1), zext(1'b1, 6))
node queues_0__value_T_1 : bv<6> = queues_0__value_T[5:0]
node queues_0__GEN_12 : bv<1> = ite(queues_0_io_deq_ready, 1'b0, queues_0__do_enq_T)
node queues_0_do_enq : bv<1> = ite(queues_0_empty, queues_0__GEN_12, queues_0__do_enq_T)
output queues_0__GEN_0_invalid.en : bv<1> = not(queues_0_do_enq)
output queues_0__GEN_3_invalid.en : bv<1> = not(queues_0_do_enq)
output queues_0__GEN_4_invalid.en : bv<1> = not(queues_0_do_enq)
node queues_0__GEN_5 : bv<6> = ite(queues_0_do_enq, queues_0__value_T_1, queues_0_enq_ptr_value)
node queues_0__value_T_2 : bv<7> = add(zext(queues_0_deq_ptr_value, 1), zext(1'b1, 6))
node queues_0__value_T_3 : bv<6> = queues_0__value_T_2[5:0]
node queues_0_do_deq : bv<1> = ite(queues_0_empty, 1'b0, queues_0__do_deq_T)
node queues_0__GEN_6 : bv<6> = ite(queues_0_do_deq, queues_0__value_T_3, queues_0_deq_ptr_value)
node queues_0__T : bv<1> = not(eq(queues_0_do_enq, queues_0_do_deq))
node queues_0__GEN_7 : bv<1> = ite(queues_0__T, queues_0_do_enq, queues_0_maybe_full)
node queues_0_io_enq_bits : bv<8> = dut_io_data_in_0
node queues_0_io_deq_bits : bv<8> = ite(queues_0_empty, queues_0_io_enq_bits, queues_0_ram.io_deq_bits_MPORT.data)
node queues_0_ram.io_deq_bits_MPORT.en : bv<1> = 1'b1
node queues_0_ram.MPORT.en : bv<1> = ite(queues_0_empty, queues_0__GEN_12, queues_0__do_enq_T)
node queues_0_ram.MPORT.addr : bv<6> = ite(not(queues_0_do_enq), queues_0__GEN_0_invalid, queues_0_enq_ptr_value)
node queues_0_ram.MPORT.mask : bv<1> = ite(not(queues_0_do_enq), queues_0__GEN_3_invalid, 1'b1)
node queues_0_ram.MPORT.data : bv<8> = ite(not(queues_0_do_enq), queues_0__GEN_4_invalid, queues_0_io_enq_bits)
node queues_1_ram.io_deq_bits_MPORT.addr : bv<6> = queues_1_deq_ptr_value
node queues_1_ram.io_deq_bits_MPORT.data : bv<8> = queues_1_ram[queues_1_ram.io_deq_bits_MPORT.addr]
node queues_1_ptr_match : bv<1> = eq(queues_1_enq_ptr_value, queues_1_deq_ptr_value)
node queues_1__empty_T : bv<1> = not(queues_1_maybe_full)
node queues_1_empty : bv<1> = and(queues_1_ptr_match, queues_1__empty_T)
node queues_1_full : bv<1> = and(queues_1_ptr_match, queues_1_maybe_full)
node queues_1_io_deq_ready : bv<1> = and(dut_io_req, dut__io_gnt_1_T)
node queues_1__io_enq_ready_T : bv<1> = not(queues_1_full)
node queues_1_io_enq_ready : bv<1> = or(queues_1_io_deq_ready, queues_1__io_enq_ready_T)
node queues_1_io_enq_valid : bv<1> = dut_io_push_1
node queues_1__do_enq_T : bv<1> = and(queues_1_io_enq_ready, queues_1_io_enq_valid)
node queues_1__io_deq_valid_T : bv<1> = not(queues_1_empty)
node queues_1_io_deq_valid : bv<1> = or(queues_1_io_enq_valid, queues_1__io_deq_valid_T)
node queues_1__do_deq_T : bv<1> = and(queues_1_io_deq_ready, queues_1_io_deq_valid)
node queues_1__value_T : bv<7> = add(zext(queues_1_enq_ptr_value, 1), zext(1'b1, 6))
node queues_1__value_T_1 : bv<6> = queues_1__value_T[5:0]
node queues_1__GEN_12 : bv<1> = ite(queues_1_io_deq_ready, 1'b0, queues_1__do_enq_T)
node queues_1_do_enq : bv<1> = ite(queues_1_empty, queues_1__GEN_12, queues_1__do_enq_T)
output queues_1__GEN_0_invalid.en : bv<1> = not(queues_1_do_enq)
output queues_1__GEN_3_invalid.en : bv<1> = not(queues_1_do_enq)
output queues_1__GEN_4_invalid.en : bv<1> = not(queues_1_do_enq)
node queues_1__GEN_5 : bv<6> = ite(queues_1_do_enq, queues_1__value_T_1, queues_1_enq_ptr_value)
node queues_1__value_T_2 : bv<7> = add(zext(queues_1_deq_ptr_value, 1), zext(1'b1, 6))
node queues_1__value_T_3 : bv<6> = queues_1__value_T_2[5:0]
node queues_1_do_deq : bv<1> = ite(queues_1_empty, 1'b0, queues_1__do_deq_T)
node queues_1__GEN_6 : bv<6> = ite(queues_1_do_deq, queues_1__value_T_3, queues_1_deq_ptr_value)
node queues_1__T : bv<1> = not(eq(queues_1_do_enq, queues_1_do_deq))
node queues_1__GEN_7 : bv<1> = ite(queues_1__T, queues_1_do_enq, queues_1_maybe_full)
node queues_1_io_enq_bits : bv<8> = dut_io_data_in_1
node queues_1_io_deq_bits : bv<8> = ite(queues_1_empty, queues_1_io_enq_bits, queues_1_ram.io_deq_bits_MPORT.data)
node queues_1_ram.io_deq_bits_MPORT.en : bv<1> = 1'b1
node queues_1_ram.MPORT.en : bv<1> = ite(queues_1_empty, queues_1__GEN_12, queues_1__do_enq_T)
node queues_1_ram.MPORT.addr : bv<6> = ite(not(queues_1_do_enq), queues_1__GEN_0_invalid, queues_1_enq_ptr_value)
node queues_1_ram.MPORT.mask : bv<1> = ite(not(queues_1_do_enq), queues_1__GEN_3_invalid, 1'b1)
node queues_1_ram.MPORT.data : bv<8> = ite(not(queues_1_do_enq), queues_1__GEN_4_invalid, queues_1_io_enq_bits)
node queues_2_ram.io_deq_bits_MPORT.addr : bv<6> = queues_2_deq_ptr_value
node queues_2_ram.io_deq_bits_MPORT.data : bv<8> = queues_2_ram[queues_2_ram.io_deq_bits_MPORT.addr]
node queues_2_ptr_match : bv<1> = eq(queues_2_enq_ptr_value, queues_2_deq_ptr_value)
node queues_2__empty_T : bv<1> = not(queues_2_maybe_full)
node queues_2_empty : bv<1> = and(queues_2_ptr_match, queues_2__empty_T)
node queues_2_full : bv<1> = and(queues_2_ptr_match, queues_2_maybe_full)
node queues_2_io_deq_ready : bv<1> = and(dut_io_req, dut__io_gnt_2_T)
node queues_2__io_enq_ready_T : bv<1> = not(queues_2_full)
node queues_2_io_enq_ready : bv<1> = or(queues_2_io_deq_ready, queues_2__io_enq_ready_T)
node queues_2_io_enq_valid : bv<1> = dut_io_push_2
node queues_2__do_enq_T : bv<1> = and(queues_2_io_enq_ready, queues_2_io_enq_valid)
node queues_2__io_deq_valid_T : bv<1> = not(queues_2_empty)
node queues_2_io_deq_valid : bv<1> = or(queues_2_io_enq_valid, queues_2__io_deq_valid_T)
node queues_2__do_deq_T : bv<1> = and(queues_2_io_deq_ready, queues_2_io_deq_valid)
node queues_2__value_T : bv<7> = add(zext(queues_2_enq_ptr_value, 1), zext(1'b1, 6))
node queues_2__value_T_1 : bv<6> = queues_2__value_T[5:0]
node queues_2__GEN_12 : bv<1> = ite(queues_2_io_deq_ready, 1'b0, queues_2__do_enq_T)
node queues_2_do_enq : bv<1> = ite(queues_2_empty, queues_2__GEN_12, queues_2__do_enq_T)
output queues_2__GEN_0_invalid.en : bv<1> = not(queues_2_do_enq)
output queues_2__GEN_3_invalid.en : bv<1> = not(queues_2_do_enq)
output queues_2__GEN_4_invalid.en : bv<1> = not(queues_2_do_enq)
node queues_2__GEN_5 : bv<6> = ite(queues_2_do_enq, queues_2__value_T_1, queues_2_enq_ptr_value)
node queues_2__value_T_2 : bv<7> = add(zext(queues_2_deq_ptr_value, 1), zext(1'b1, 6))
node queues_2__value_T_3 : bv<6> = queues_2__value_T_2[5:0]
node queues_2_do_deq : bv<1> = ite(queues_2_empty, 1'b0, queues_2__do_deq_T)
node queues_2__GEN_6 : bv<6> = ite(queues_2_do_deq, queues_2__value_T_3, queues_2_deq_ptr_value)
node queues_2__T : bv<1> = not(eq(queues_2_do_enq, queues_2_do_deq))
node queues_2__GEN_7 : bv<1> = ite(queues_2__T, queues_2_do_enq, queues_2_maybe_full)
node queues_2_io_enq_bits : bv<8> = dut_io_data_in_2
node queues_2_io_deq_bits : bv<8> = ite(queues_2_empty, queues_2_io_enq_bits, queues_2_ram.io_deq_bits_MPORT.data)
node queues_2_ram.io_deq_bits_MPORT.en : bv<1> = 1'b1
node queues_2_ram.MPORT.en : bv<1> = ite(queues_2_empty, queues_2__GEN_12, queues_2__do_enq_T)
node queues_2_ram.MPORT.addr : bv<6> = ite(not(queues_2_do_enq), queues_2__GEN_0_invalid, queues_2_enq_ptr_value)
node queues_2_ram.MPORT.mask : bv<1> = ite(not(queues_2_do_enq), queues_2__GEN_3_invalid, 1'b1)
node queues_2_ram.MPORT.data : bv<8> = ite(not(queues_2_do_enq), queues_2__GEN_4_invalid, queues_2_io_enq_bits)
node queues_3_ram.io_deq_bits_MPORT.addr : bv<6> = queues_3_deq_ptr_value
node queues_3_ram.io_deq_bits_MPORT.data : bv<8> = queues_3_ram[queues_3_ram.io_deq_bits_MPORT.addr]
node queues_3_ptr_match : bv<1> = eq(queues_3_enq_ptr_value, queues_3_deq_ptr_value)
node queues_3__empty_T : bv<1> = not(queues_3_maybe_full)
node queues_3_empty : bv<1> = and(queues_3_ptr_match, queues_3__empty_T)
node queues_3_full : bv<1> = and(queues_3_ptr_match, queues_3_maybe_full)
node queues_3_io_deq_ready : bv<1> = and(dut_io_req, dut__io_gnt_3_T)
node queues_3__io_enq_ready_T : bv<1> = not(queues_3_full)
node queues_3_io_enq_ready : bv<1> = or(queues_3_io_deq_ready, queues_3__io_enq_ready_T)
node queues_3_io_enq_valid : bv<1> = dut_io_push_3
node queues_3__do_enq_T : bv<1> = and(queues_3_io_enq_ready, queues_3_io_enq_valid)
node queues_3__io_deq_valid_T : bv<1> = not(queues_3_empty)
node queues_3_io_deq_valid : bv<1> = or(queues_3_io_enq_valid, queues_3__io_deq_valid_T)
node queues_3__do_deq_T : bv<1> = and(queues_3_io_deq_ready, queues_3_io_deq_valid)
node queues_3__value_T : bv<7> = add(zext(queues_3_enq_ptr_value, 1), zext(1'b1, 6))
node queues_3__value_T_1 : bv<6> = queues_3__value_T[5:0]
node queues_3__GEN_12 : bv<1> = ite(queues_3_io_deq_ready, 1'b0, queues_3__do_enq_T)
node queues_3_do_enq : bv<1> = ite(queues_3_empty, queues_3__GEN_12, queues_3__do_enq_T)
output queues_3__GEN_0_invalid.en : bv<1> = not(queues_3_do_enq)
output queues_3__GEN_3_invalid.en : bv<1> = not(queues_3_do_enq)
output queues_3__GEN_4_invalid.en : bv<1> = not(queues_3_do_enq)
node queues_3__GEN_5 : bv<6> = ite(queues_3_do_enq, queues_3__value_T_1, queues_3_enq_ptr_value)
node queues_3__value_T_2 : bv<7> = add(zext(queues_3_deq_ptr_value, 1), zext(1'b1, 6))
node queues_3__value_T_3 : bv<6> = queues_3__value_T_2[5:0]
node queues_3_do_deq : bv<1> = ite(queues_3_empty, 1'b0, queues_3__do_deq_T)
node queues_3__GEN_6 : bv<6> = ite(queues_3_do_deq, queues_3__value_T_3, queues_3_deq_ptr_value)
node queues_3__T : bv<1> = not(eq(queues_3_do_enq, queues_3_do_deq))
node queues_3__GEN_7 : bv<1> = ite(queues_3__T, queues_3_do_enq, queues_3_maybe_full)
node queues_3_io_enq_bits : bv<8> = dut_io_data_in_3
node queues_3_io_deq_bits : bv<8> = ite(queues_3_empty, queues_3_io_enq_bits, queues_3_ram.io_deq_bits_MPORT.data)
node queues_3_ram.io_deq_bits_MPORT.en : bv<1> = 1'b1
node queues_3_ram.MPORT.en : bv<1> = ite(queues_3_empty, queues_3__GEN_12, queues_3__do_enq_T)
node queues_3_ram.MPORT.addr : bv<6> = ite(not(queues_3_do_enq), queues_3__GEN_0_invalid, queues_3_enq_ptr_value)
node queues_3_ram.MPORT.mask : bv<1> = ite(not(queues_3_do_enq), queues_3__GEN_3_invalid, 1'b1)
node queues_3_ram.MPORT.data : bv<8> = ite(not(queues_3_do_enq), queues_3__GEN_4_invalid, queues_3_io_enq_bits)
node _T_6 : bv<1> = not(reset)
node _T_7 : bv<1> = not(queues_0_io_deq_valid)
node _T_8 : bv<1> = eq(queues_0_io_deq_bits, dut_io_data_out)
node _T_11 : bv<1> = not(_T_8)
node _T_15 : bv<1> = not(queues_1_io_deq_valid)
node _T_16 : bv<1> = eq(queues_1_io_deq_bits, dut_io_data_out)
node _T_19 : bv<1> = not(_T_16)
node _T_23 : bv<1> = not(queues_2_io_deq_valid)
node _T_24 : bv<1> = eq(queues_2_io_deq_bits, dut_io_data_out)
node _T_27 : bv<1> = not(_T_24)
node _T_31 : bv<1> = not(queues_3_io_deq_valid)
node _T_32 : bv<1> = eq(queues_3_io_deq_bits, dut_io_data_out)
node _T_35 : bv<1> = not(_T_32)
node _resetPhase : bv<1> = not(ugeq(_resetCount, 1'b1))
node queues_0_reset : bv<1> = reset
node queues_1_reset : bv<1> = reset
node queues_2_reset : bv<1> = reset
node queues_3_reset : bv<1> = reset
bad assert : bv<1> = not(implies(and(and(dut_io_req, dut__io_gnt_0_T), _T_6), queues_0_io_deq_valid))
bad assert_1 : bv<1> = not(implies(and(and(dut_io_req, dut__io_gnt_0_T), _T_6), _T_8))
bad assert_2 : bv<1> = not(implies(and(and(dut_io_req, dut__io_gnt_1_T), _T_6), queues_1_io_deq_valid))
bad assert_3 : bv<1> = not(implies(and(and(dut_io_req, dut__io_gnt_1_T), _T_6), _T_16))
bad assert_4 : bv<1> = not(implies(and(and(dut_io_req, dut__io_gnt_2_T), _T_6), queues_2_io_deq_valid))
bad assert_5 : bv<1> = not(implies(and(and(dut_io_req, dut__io_gnt_2_T), _T_6), _T_24))
bad assert_6 : bv<1> = not(implies(and(and(dut_io_req, dut__io_gnt_3_T), _T_6), queues_3_io_deq_valid))
bad assert_7 : bv<1> = not(implies(and(and(dut_io_req, dut__io_gnt_3_T), _T_6), _T_32))
constraint _resetActive : bv<1> = implies(_resetPhase, reset)
state dut_fifo_entries : bv<5> -> bv<8>
  [next] ite(and(dut_fifo_entries.MPORT.en, dut_fifo_entries.MPORT.mask), dut_fifo_entries[dut_fifo_entries.MPORT.addr := dut_fifo_entries.MPORT.data], dut_fifo_entries)
state dut_fifo_cnt : bv<6>
  [next] ite(dut_fifo_reset, 6'b0, dut_fifo__cnt_T_3)
state dut_fifo_wrPtr : bv<5>
  [next] ite(dut_fifo_reset, 5'b0, dut_fifo__wrPtr_T_1)
state dut_fifo_rdPtr : bv<5>
  [next] ite(dut_fifo_reset, 5'b0, dut_fifo__rdPtr_T_1)
state dut_cc_credits : bv<6>
  [next] ite(dut_cc_reset, 6'b100001, dut_cc__credits_T_3)
state dut_fifo_1_entries : bv<5> -> bv<8>
  [next] ite(and(dut_fifo_1_entries.MPORT.en, dut_fifo_1_entries.MPORT.mask), dut_fifo_1_entries[dut_fifo_1_entries.MPORT.addr := dut_fifo_1_entries.MPORT.data], dut_fifo_1_entries)
state dut_fifo_1_cnt : bv<6>
  [next] ite(dut_fifo_1_reset, 6'b0, dut_fifo_1__cnt_T_3)
state dut_fifo_1_wrPtr : bv<5>
  [next] ite(dut_fifo_1_reset, 5'b0, dut_fifo_1__wrPtr_T_1)
state dut_fifo_1_rdPtr : bv<5>
  [next] ite(dut_fifo_1_reset, 5'b0, dut_fifo_1__rdPtr_T_1)
state dut_cc_1_credits : bv<6>
  [next] ite(dut_cc_1_reset, 6'b100001, dut_cc_1__credits_T_3)
state dut_fifo_2_entries : bv<5> -> bv<8>
  [next] ite(and(dut_fifo_2_entries.MPORT.en, dut_fifo_2_entries.MPORT.mask), dut_fifo_2_entries[dut_fifo_2_entries.MPORT.addr := dut_fifo_2_entries.MPORT.data], dut_fifo_2_entries)
state dut_fifo_2_cnt : bv<6>
  [next] ite(dut_fifo_2_reset, 6'b0, dut_fifo_2__cnt_T_3)
state dut_fifo_2_wrPtr : bv<5>
  [next] ite(dut_fifo_2_reset, 5'b0, dut_fifo_2__wrPtr_T_1)
state dut_fifo_2_rdPtr : bv<5>
  [next] ite(dut_fifo_2_reset, 5'b0, dut_fifo_2__rdPtr_T_1)
state dut_cc_2_credits : bv<6>
  [next] ite(dut_cc_2_reset, 6'b100001, dut_cc_2__credits_T_3)
state dut_fifo_3_entries : bv<5> -> bv<8>
  [next] ite(and(dut_fifo_3_entries.MPORT.en, dut_fifo_3_entries.MPORT.mask), dut_fifo_3_entries[dut_fifo_3_entries.MPORT.addr := dut_fifo_3_entries.MPORT.data], dut_fifo_3_entries)
state dut_fifo_3_cnt : bv<6>
  [next] ite(dut_fifo_3_reset, 6'b0, dut_fifo_3__cnt_T_3)
state dut_fifo_3_wrPtr : bv<5>
  [next] ite(dut_fifo_3_reset, 5'b0, dut_fifo_3__wrPtr_T_1)
state dut_fifo_3_rdPtr : bv<5>
  [next] ite(dut_fifo_3_reset, 5'b0, dut_fifo_3__rdPtr_T_1)
state dut_cc_3_credits : bv<6>
  [next] ite(dut_cc_3_reset, 6'b100001, dut_cc_3__credits_T_3)
state queues_0_ram : bv<6> -> bv<8>
  [next] ite(and(queues_0_ram.MPORT.en, queues_0_ram.MPORT.mask), queues_0_ram[queues_0_ram.MPORT.addr := queues_0_ram.MPORT.data], queues_0_ram)
state queues_0_enq_ptr_value : bv<6>
  [next] ite(queues_0_reset, 6'b0, queues_0__GEN_5)
state queues_0_deq_ptr_value : bv<6>
  [next] ite(queues_0_reset, 6'b0, queues_0__GEN_6)
state queues_0_maybe_full : bv<1>
  [next] ite(queues_0_reset, 1'b0, queues_0__GEN_7)
state queues_1_ram : bv<6> -> bv<8>
  [next] ite(and(queues_1_ram.MPORT.en, queues_1_ram.MPORT.mask), queues_1_ram[queues_1_ram.MPORT.addr := queues_1_ram.MPORT.data], queues_1_ram)
state queues_1_enq_ptr_value : bv<6>
  [next] ite(queues_1_reset, 6'b0, queues_1__GEN_5)
state queues_1_deq_ptr_value : bv<6>
  [next] ite(queues_1_reset, 6'b0, queues_1__GEN_6)
state queues_1_maybe_full : bv<1>
  [next] ite(queues_1_reset, 1'b0, queues_1__GEN_7)
state queues_2_ram : bv<6> -> bv<8>
  [next] ite(and(queues_2_ram.MPORT.en, queues_2_ram.MPORT.mask), queues_2_ram[queues_2_ram.MPORT.addr := queues_2_ram.MPORT.data], queues_2_ram)
state queues_2_enq_ptr_value : bv<6>
  [next] ite(queues_2_reset, 6'b0, queues_2__GEN_5)
state queues_2_deq_ptr_value : bv<6>
  [next] ite(queues_2_reset, 6'b0, queues_2__GEN_6)
state queues_2_maybe_full : bv<1>
  [next] ite(queues_2_reset, 1'b0, queues_2__GEN_7)
state queues_3_ram : bv<6> -> bv<8>
  [next] ite(and(queues_3_ram.MPORT.en, queues_3_ram.MPORT.mask), queues_3_ram[queues_3_ram.MPORT.addr := queues_3_ram.MPORT.data], queues_3_ram)
state queues_3_enq_ptr_value : bv<6>
  [next] ite(queues_3_reset, 6'b0, queues_3__GEN_5)
state queues_3_deq_ptr_value : bv<6>
  [next] ite(queues_3_reset, 6'b0, queues_3__GEN_6)
state queues_3_maybe_full : bv<1>
  [next] ite(queues_3_reset, 1'b0, queues_3__GEN_7)
state _resetCount : bv<1>
  [init] 1'b0
  [next] ite(_resetPhase, add(zext(_resetCount, 1), zext(1'b1, 1))[0], _resetCount)