circuit FifoFormalHarness :
  module ShiftRegisterFifo :
    input clock : Clock
    input reset : UInt<1>
    input io_push : UInt<1>
    input io_pop : UInt<1>
    input io_data_in : UInt<64>
    output io_full : UInt<1>
    output io_empty : UInt<1>
    output io_data_out : UInt<64>

    reg count : UInt<8>, clock with :
      reset => (UInt<1>("h0"), count) @[ShiftRegisterFifo.scala 14:22]
    node _count_T = add(count, io_push) @[ShiftRegisterFifo.scala 15:18]
    node _count_T_1 = tail(_count_T, 1) @[ShiftRegisterFifo.scala 15:18]
    node _count_T_2 = sub(_count_T_1, io_pop) @[ShiftRegisterFifo.scala 15:28]
    node _count_T_3 = tail(_count_T_2, 1) @[ShiftRegisterFifo.scala 15:28]
    node _io_empty_T = eq(count, UInt<1>("h0")) @[ShiftRegisterFifo.scala 17:21]
    node _io_full_T = geq(count, UInt<8>("h80")) @[ShiftRegisterFifo.scala 18:20]
    reg entries_0 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_0) @[ShiftRegisterFifo.scala 22:22]
    node _entries_T = eq(count, UInt<1>("h0")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_1 = and(io_push, _entries_T) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_2 = or(io_pop, _entries_T_1) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_0_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_0_T_1 = tail(_next_value_0_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_0_T_2 = eq(_next_value_0_T_1, UInt<1>("h0")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_0_T_3 = and(io_push, _next_value_0_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_1 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_1) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed = mux(io_pop, entries_1, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_0_T_4 = mux(_next_value_0_T_3, io_data_in, not_pushed) @[ShiftRegisterFifo.scala 33:16]
    node next_value_0 = _next_value_0_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_0 = mux(_entries_T_2, next_value_0, entries_0) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_3 = eq(count, UInt<1>("h1")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_4 = and(io_push, _entries_T_3) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_5 = or(io_pop, _entries_T_4) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_1_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_1_T_1 = tail(_next_value_1_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_1_T_2 = eq(_next_value_1_T_1, UInt<1>("h1")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_1_T_3 = and(io_push, _next_value_1_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_2 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_2) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_1 = mux(io_pop, entries_2, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_1_T_4 = mux(_next_value_1_T_3, io_data_in, not_pushed_1) @[ShiftRegisterFifo.scala 33:16]
    node next_value_1 = _next_value_1_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_1 = mux(_entries_T_5, next_value_1, entries_1) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_6 = eq(count, UInt<2>("h2")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_7 = and(io_push, _entries_T_6) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_8 = or(io_pop, _entries_T_7) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_2_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_2_T_1 = tail(_next_value_2_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_2_T_2 = eq(_next_value_2_T_1, UInt<2>("h2")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_2_T_3 = and(io_push, _next_value_2_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_3 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_3) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_2 = mux(io_pop, entries_3, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_2_T_4 = mux(_next_value_2_T_3, io_data_in, not_pushed_2) @[ShiftRegisterFifo.scala 33:16]
    node next_value_2 = _next_value_2_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_2 = mux(_entries_T_8, next_value_2, entries_2) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_9 = eq(count, UInt<2>("h3")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_10 = and(io_push, _entries_T_9) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_11 = or(io_pop, _entries_T_10) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_3_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_3_T_1 = tail(_next_value_3_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_3_T_2 = eq(_next_value_3_T_1, UInt<2>("h3")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_3_T_3 = and(io_push, _next_value_3_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_4 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_4) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_3 = mux(io_pop, entries_4, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_3_T_4 = mux(_next_value_3_T_3, io_data_in, not_pushed_3) @[ShiftRegisterFifo.scala 33:16]
    node next_value_3 = _next_value_3_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_3 = mux(_entries_T_11, next_value_3, entries_3) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_12 = eq(count, UInt<3>("h4")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_13 = and(io_push, _entries_T_12) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_14 = or(io_pop, _entries_T_13) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_4_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_4_T_1 = tail(_next_value_4_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_4_T_2 = eq(_next_value_4_T_1, UInt<3>("h4")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_4_T_3 = and(io_push, _next_value_4_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_5 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_5) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_4 = mux(io_pop, entries_5, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_4_T_4 = mux(_next_value_4_T_3, io_data_in, not_pushed_4) @[ShiftRegisterFifo.scala 33:16]
    node next_value_4 = _next_value_4_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_4 = mux(_entries_T_14, next_value_4, entries_4) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_15 = eq(count, UInt<3>("h5")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_16 = and(io_push, _entries_T_15) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_17 = or(io_pop, _entries_T_16) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_5_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_5_T_1 = tail(_next_value_5_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_5_T_2 = eq(_next_value_5_T_1, UInt<3>("h5")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_5_T_3 = and(io_push, _next_value_5_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_6 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_6) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_5 = mux(io_pop, entries_6, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_5_T_4 = mux(_next_value_5_T_3, io_data_in, not_pushed_5) @[ShiftRegisterFifo.scala 33:16]
    node next_value_5 = _next_value_5_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_5 = mux(_entries_T_17, next_value_5, entries_5) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_18 = eq(count, UInt<3>("h6")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_19 = and(io_push, _entries_T_18) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_20 = or(io_pop, _entries_T_19) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_6_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_6_T_1 = tail(_next_value_6_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_6_T_2 = eq(_next_value_6_T_1, UInt<3>("h6")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_6_T_3 = and(io_push, _next_value_6_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_7 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_7) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_6 = mux(io_pop, entries_7, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_6_T_4 = mux(_next_value_6_T_3, io_data_in, not_pushed_6) @[ShiftRegisterFifo.scala 33:16]
    node next_value_6 = _next_value_6_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_6 = mux(_entries_T_20, next_value_6, entries_6) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_21 = eq(count, UInt<3>("h7")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_22 = and(io_push, _entries_T_21) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_23 = or(io_pop, _entries_T_22) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_7_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_7_T_1 = tail(_next_value_7_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_7_T_2 = eq(_next_value_7_T_1, UInt<3>("h7")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_7_T_3 = and(io_push, _next_value_7_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_8 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_8) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_7 = mux(io_pop, entries_8, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_7_T_4 = mux(_next_value_7_T_3, io_data_in, not_pushed_7) @[ShiftRegisterFifo.scala 33:16]
    node next_value_7 = _next_value_7_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_7 = mux(_entries_T_23, next_value_7, entries_7) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_24 = eq(count, UInt<4>("h8")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_25 = and(io_push, _entries_T_24) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_26 = or(io_pop, _entries_T_25) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_8_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_8_T_1 = tail(_next_value_8_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_8_T_2 = eq(_next_value_8_T_1, UInt<4>("h8")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_8_T_3 = and(io_push, _next_value_8_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_9 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_9) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_8 = mux(io_pop, entries_9, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_8_T_4 = mux(_next_value_8_T_3, io_data_in, not_pushed_8) @[ShiftRegisterFifo.scala 33:16]
    node next_value_8 = _next_value_8_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_8 = mux(_entries_T_26, next_value_8, entries_8) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_27 = eq(count, UInt<4>("h9")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_28 = and(io_push, _entries_T_27) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_29 = or(io_pop, _entries_T_28) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_9_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_9_T_1 = tail(_next_value_9_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_9_T_2 = eq(_next_value_9_T_1, UInt<4>("h9")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_9_T_3 = and(io_push, _next_value_9_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_10 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_10) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_9 = mux(io_pop, entries_10, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_9_T_4 = mux(_next_value_9_T_3, io_data_in, not_pushed_9) @[ShiftRegisterFifo.scala 33:16]
    node next_value_9 = _next_value_9_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_9 = mux(_entries_T_29, next_value_9, entries_9) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_30 = eq(count, UInt<4>("ha")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_31 = and(io_push, _entries_T_30) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_32 = or(io_pop, _entries_T_31) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_10_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_10_T_1 = tail(_next_value_10_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_10_T_2 = eq(_next_value_10_T_1, UInt<4>("ha")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_10_T_3 = and(io_push, _next_value_10_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_11 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_11) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_10 = mux(io_pop, entries_11, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_10_T_4 = mux(_next_value_10_T_3, io_data_in, not_pushed_10) @[ShiftRegisterFifo.scala 33:16]
    node next_value_10 = _next_value_10_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_10 = mux(_entries_T_32, next_value_10, entries_10) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_33 = eq(count, UInt<4>("hb")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_34 = and(io_push, _entries_T_33) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_35 = or(io_pop, _entries_T_34) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_11_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_11_T_1 = tail(_next_value_11_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_11_T_2 = eq(_next_value_11_T_1, UInt<4>("hb")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_11_T_3 = and(io_push, _next_value_11_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_12 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_12) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_11 = mux(io_pop, entries_12, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_11_T_4 = mux(_next_value_11_T_3, io_data_in, not_pushed_11) @[ShiftRegisterFifo.scala 33:16]
    node next_value_11 = _next_value_11_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_11 = mux(_entries_T_35, next_value_11, entries_11) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_36 = eq(count, UInt<4>("hc")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_37 = and(io_push, _entries_T_36) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_38 = or(io_pop, _entries_T_37) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_12_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_12_T_1 = tail(_next_value_12_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_12_T_2 = eq(_next_value_12_T_1, UInt<4>("hc")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_12_T_3 = and(io_push, _next_value_12_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_13 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_13) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_12 = mux(io_pop, entries_13, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_12_T_4 = mux(_next_value_12_T_3, io_data_in, not_pushed_12) @[ShiftRegisterFifo.scala 33:16]
    node next_value_12 = _next_value_12_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_12 = mux(_entries_T_38, next_value_12, entries_12) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_39 = eq(count, UInt<4>("hd")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_40 = and(io_push, _entries_T_39) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_41 = or(io_pop, _entries_T_40) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_13_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_13_T_1 = tail(_next_value_13_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_13_T_2 = eq(_next_value_13_T_1, UInt<4>("hd")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_13_T_3 = and(io_push, _next_value_13_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_14 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_14) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_13 = mux(io_pop, entries_14, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_13_T_4 = mux(_next_value_13_T_3, io_data_in, not_pushed_13) @[ShiftRegisterFifo.scala 33:16]
    node next_value_13 = _next_value_13_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_13 = mux(_entries_T_41, next_value_13, entries_13) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_42 = eq(count, UInt<4>("he")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_43 = and(io_push, _entries_T_42) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_44 = or(io_pop, _entries_T_43) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_14_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_14_T_1 = tail(_next_value_14_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_14_T_2 = eq(_next_value_14_T_1, UInt<4>("he")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_14_T_3 = and(io_push, _next_value_14_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_15 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_15) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_14 = mux(io_pop, entries_15, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_14_T_4 = mux(_next_value_14_T_3, io_data_in, not_pushed_14) @[ShiftRegisterFifo.scala 33:16]
    node next_value_14 = _next_value_14_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_14 = mux(_entries_T_44, next_value_14, entries_14) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_45 = eq(count, UInt<4>("hf")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_46 = and(io_push, _entries_T_45) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_47 = or(io_pop, _entries_T_46) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_15_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_15_T_1 = tail(_next_value_15_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_15_T_2 = eq(_next_value_15_T_1, UInt<4>("hf")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_15_T_3 = and(io_push, _next_value_15_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_16 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_16) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_15 = mux(io_pop, entries_16, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_15_T_4 = mux(_next_value_15_T_3, io_data_in, not_pushed_15) @[ShiftRegisterFifo.scala 33:16]
    node next_value_15 = _next_value_15_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_15 = mux(_entries_T_47, next_value_15, entries_15) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_48 = eq(count, UInt<5>("h10")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_49 = and(io_push, _entries_T_48) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_50 = or(io_pop, _entries_T_49) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_16_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_16_T_1 = tail(_next_value_16_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_16_T_2 = eq(_next_value_16_T_1, UInt<5>("h10")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_16_T_3 = and(io_push, _next_value_16_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_17 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_17) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_16 = mux(io_pop, entries_17, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_16_T_4 = mux(_next_value_16_T_3, io_data_in, not_pushed_16) @[ShiftRegisterFifo.scala 33:16]
    node next_value_16 = _next_value_16_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_16 = mux(_entries_T_50, next_value_16, entries_16) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_51 = eq(count, UInt<5>("h11")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_52 = and(io_push, _entries_T_51) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_53 = or(io_pop, _entries_T_52) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_17_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_17_T_1 = tail(_next_value_17_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_17_T_2 = eq(_next_value_17_T_1, UInt<5>("h11")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_17_T_3 = and(io_push, _next_value_17_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_18 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_18) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_17 = mux(io_pop, entries_18, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_17_T_4 = mux(_next_value_17_T_3, io_data_in, not_pushed_17) @[ShiftRegisterFifo.scala 33:16]
    node next_value_17 = _next_value_17_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_17 = mux(_entries_T_53, next_value_17, entries_17) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_54 = eq(count, UInt<5>("h12")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_55 = and(io_push, _entries_T_54) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_56 = or(io_pop, _entries_T_55) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_18_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_18_T_1 = tail(_next_value_18_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_18_T_2 = eq(_next_value_18_T_1, UInt<5>("h12")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_18_T_3 = and(io_push, _next_value_18_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_19 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_19) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_18 = mux(io_pop, entries_19, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_18_T_4 = mux(_next_value_18_T_3, io_data_in, not_pushed_18) @[ShiftRegisterFifo.scala 33:16]
    node next_value_18 = _next_value_18_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_18 = mux(_entries_T_56, next_value_18, entries_18) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_57 = eq(count, UInt<5>("h13")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_58 = and(io_push, _entries_T_57) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_59 = or(io_pop, _entries_T_58) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_19_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_19_T_1 = tail(_next_value_19_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_19_T_2 = eq(_next_value_19_T_1, UInt<5>("h13")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_19_T_3 = and(io_push, _next_value_19_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_20 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_20) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_19 = mux(io_pop, entries_20, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_19_T_4 = mux(_next_value_19_T_3, io_data_in, not_pushed_19) @[ShiftRegisterFifo.scala 33:16]
    node next_value_19 = _next_value_19_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_19 = mux(_entries_T_59, next_value_19, entries_19) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_60 = eq(count, UInt<5>("h14")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_61 = and(io_push, _entries_T_60) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_62 = or(io_pop, _entries_T_61) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_20_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_20_T_1 = tail(_next_value_20_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_20_T_2 = eq(_next_value_20_T_1, UInt<5>("h14")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_20_T_3 = and(io_push, _next_value_20_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_21 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_21) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_20 = mux(io_pop, entries_21, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_20_T_4 = mux(_next_value_20_T_3, io_data_in, not_pushed_20) @[ShiftRegisterFifo.scala 33:16]
    node next_value_20 = _next_value_20_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_20 = mux(_entries_T_62, next_value_20, entries_20) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_63 = eq(count, UInt<5>("h15")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_64 = and(io_push, _entries_T_63) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_65 = or(io_pop, _entries_T_64) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_21_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_21_T_1 = tail(_next_value_21_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_21_T_2 = eq(_next_value_21_T_1, UInt<5>("h15")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_21_T_3 = and(io_push, _next_value_21_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_22 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_22) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_21 = mux(io_pop, entries_22, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_21_T_4 = mux(_next_value_21_T_3, io_data_in, not_pushed_21) @[ShiftRegisterFifo.scala 33:16]
    node next_value_21 = _next_value_21_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_21 = mux(_entries_T_65, next_value_21, entries_21) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_66 = eq(count, UInt<5>("h16")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_67 = and(io_push, _entries_T_66) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_68 = or(io_pop, _entries_T_67) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_22_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_22_T_1 = tail(_next_value_22_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_22_T_2 = eq(_next_value_22_T_1, UInt<5>("h16")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_22_T_3 = and(io_push, _next_value_22_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_23 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_23) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_22 = mux(io_pop, entries_23, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_22_T_4 = mux(_next_value_22_T_3, io_data_in, not_pushed_22) @[ShiftRegisterFifo.scala 33:16]
    node next_value_22 = _next_value_22_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_22 = mux(_entries_T_68, next_value_22, entries_22) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_69 = eq(count, UInt<5>("h17")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_70 = and(io_push, _entries_T_69) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_71 = or(io_pop, _entries_T_70) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_23_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_23_T_1 = tail(_next_value_23_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_23_T_2 = eq(_next_value_23_T_1, UInt<5>("h17")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_23_T_3 = and(io_push, _next_value_23_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_24 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_24) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_23 = mux(io_pop, entries_24, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_23_T_4 = mux(_next_value_23_T_3, io_data_in, not_pushed_23) @[ShiftRegisterFifo.scala 33:16]
    node next_value_23 = _next_value_23_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_23 = mux(_entries_T_71, next_value_23, entries_23) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_72 = eq(count, UInt<5>("h18")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_73 = and(io_push, _entries_T_72) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_74 = or(io_pop, _entries_T_73) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_24_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_24_T_1 = tail(_next_value_24_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_24_T_2 = eq(_next_value_24_T_1, UInt<5>("h18")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_24_T_3 = and(io_push, _next_value_24_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_25 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_25) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_24 = mux(io_pop, entries_25, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_24_T_4 = mux(_next_value_24_T_3, io_data_in, not_pushed_24) @[ShiftRegisterFifo.scala 33:16]
    node next_value_24 = _next_value_24_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_24 = mux(_entries_T_74, next_value_24, entries_24) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_75 = eq(count, UInt<5>("h19")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_76 = and(io_push, _entries_T_75) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_77 = or(io_pop, _entries_T_76) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_25_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_25_T_1 = tail(_next_value_25_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_25_T_2 = eq(_next_value_25_T_1, UInt<5>("h19")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_25_T_3 = and(io_push, _next_value_25_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_26 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_26) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_25 = mux(io_pop, entries_26, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_25_T_4 = mux(_next_value_25_T_3, io_data_in, not_pushed_25) @[ShiftRegisterFifo.scala 33:16]
    node next_value_25 = _next_value_25_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_25 = mux(_entries_T_77, next_value_25, entries_25) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_78 = eq(count, UInt<5>("h1a")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_79 = and(io_push, _entries_T_78) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_80 = or(io_pop, _entries_T_79) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_26_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_26_T_1 = tail(_next_value_26_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_26_T_2 = eq(_next_value_26_T_1, UInt<5>("h1a")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_26_T_3 = and(io_push, _next_value_26_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_27 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_27) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_26 = mux(io_pop, entries_27, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_26_T_4 = mux(_next_value_26_T_3, io_data_in, not_pushed_26) @[ShiftRegisterFifo.scala 33:16]
    node next_value_26 = _next_value_26_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_26 = mux(_entries_T_80, next_value_26, entries_26) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_81 = eq(count, UInt<5>("h1b")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_82 = and(io_push, _entries_T_81) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_83 = or(io_pop, _entries_T_82) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_27_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_27_T_1 = tail(_next_value_27_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_27_T_2 = eq(_next_value_27_T_1, UInt<5>("h1b")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_27_T_3 = and(io_push, _next_value_27_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_28 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_28) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_27 = mux(io_pop, entries_28, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_27_T_4 = mux(_next_value_27_T_3, io_data_in, not_pushed_27) @[ShiftRegisterFifo.scala 33:16]
    node next_value_27 = _next_value_27_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_27 = mux(_entries_T_83, next_value_27, entries_27) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_84 = eq(count, UInt<5>("h1c")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_85 = and(io_push, _entries_T_84) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_86 = or(io_pop, _entries_T_85) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_28_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_28_T_1 = tail(_next_value_28_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_28_T_2 = eq(_next_value_28_T_1, UInt<5>("h1c")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_28_T_3 = and(io_push, _next_value_28_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_29 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_29) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_28 = mux(io_pop, entries_29, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_28_T_4 = mux(_next_value_28_T_3, io_data_in, not_pushed_28) @[ShiftRegisterFifo.scala 33:16]
    node next_value_28 = _next_value_28_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_28 = mux(_entries_T_86, next_value_28, entries_28) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_87 = eq(count, UInt<5>("h1d")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_88 = and(io_push, _entries_T_87) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_89 = or(io_pop, _entries_T_88) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_29_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_29_T_1 = tail(_next_value_29_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_29_T_2 = eq(_next_value_29_T_1, UInt<5>("h1d")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_29_T_3 = and(io_push, _next_value_29_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_30 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_30) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_29 = mux(io_pop, entries_30, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_29_T_4 = mux(_next_value_29_T_3, io_data_in, not_pushed_29) @[ShiftRegisterFifo.scala 33:16]
    node next_value_29 = _next_value_29_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_29 = mux(_entries_T_89, next_value_29, entries_29) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_90 = eq(count, UInt<5>("h1e")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_91 = and(io_push, _entries_T_90) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_92 = or(io_pop, _entries_T_91) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_30_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_30_T_1 = tail(_next_value_30_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_30_T_2 = eq(_next_value_30_T_1, UInt<5>("h1e")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_30_T_3 = and(io_push, _next_value_30_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_31 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_31) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_30 = mux(io_pop, entries_31, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_30_T_4 = mux(_next_value_30_T_3, io_data_in, not_pushed_30) @[ShiftRegisterFifo.scala 33:16]
    node next_value_30 = _next_value_30_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_30 = mux(_entries_T_92, next_value_30, entries_30) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_93 = eq(count, UInt<5>("h1f")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_94 = and(io_push, _entries_T_93) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_95 = or(io_pop, _entries_T_94) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_31_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_31_T_1 = tail(_next_value_31_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_31_T_2 = eq(_next_value_31_T_1, UInt<5>("h1f")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_31_T_3 = and(io_push, _next_value_31_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_32 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_32) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_31 = mux(io_pop, entries_32, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_31_T_4 = mux(_next_value_31_T_3, io_data_in, not_pushed_31) @[ShiftRegisterFifo.scala 33:16]
    node next_value_31 = _next_value_31_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_31 = mux(_entries_T_95, next_value_31, entries_31) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_96 = eq(count, UInt<6>("h20")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_97 = and(io_push, _entries_T_96) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_98 = or(io_pop, _entries_T_97) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_32_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_32_T_1 = tail(_next_value_32_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_32_T_2 = eq(_next_value_32_T_1, UInt<6>("h20")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_32_T_3 = and(io_push, _next_value_32_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_33 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_33) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_32 = mux(io_pop, entries_33, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_32_T_4 = mux(_next_value_32_T_3, io_data_in, not_pushed_32) @[ShiftRegisterFifo.scala 33:16]
    node next_value_32 = _next_value_32_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_32 = mux(_entries_T_98, next_value_32, entries_32) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_99 = eq(count, UInt<6>("h21")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_100 = and(io_push, _entries_T_99) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_101 = or(io_pop, _entries_T_100) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_33_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_33_T_1 = tail(_next_value_33_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_33_T_2 = eq(_next_value_33_T_1, UInt<6>("h21")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_33_T_3 = and(io_push, _next_value_33_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_34 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_34) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_33 = mux(io_pop, entries_34, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_33_T_4 = mux(_next_value_33_T_3, io_data_in, not_pushed_33) @[ShiftRegisterFifo.scala 33:16]
    node next_value_33 = _next_value_33_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_33 = mux(_entries_T_101, next_value_33, entries_33) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_102 = eq(count, UInt<6>("h22")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_103 = and(io_push, _entries_T_102) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_104 = or(io_pop, _entries_T_103) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_34_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_34_T_1 = tail(_next_value_34_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_34_T_2 = eq(_next_value_34_T_1, UInt<6>("h22")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_34_T_3 = and(io_push, _next_value_34_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_35 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_35) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_34 = mux(io_pop, entries_35, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_34_T_4 = mux(_next_value_34_T_3, io_data_in, not_pushed_34) @[ShiftRegisterFifo.scala 33:16]
    node next_value_34 = _next_value_34_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_34 = mux(_entries_T_104, next_value_34, entries_34) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_105 = eq(count, UInt<6>("h23")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_106 = and(io_push, _entries_T_105) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_107 = or(io_pop, _entries_T_106) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_35_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_35_T_1 = tail(_next_value_35_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_35_T_2 = eq(_next_value_35_T_1, UInt<6>("h23")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_35_T_3 = and(io_push, _next_value_35_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_36 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_36) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_35 = mux(io_pop, entries_36, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_35_T_4 = mux(_next_value_35_T_3, io_data_in, not_pushed_35) @[ShiftRegisterFifo.scala 33:16]
    node next_value_35 = _next_value_35_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_35 = mux(_entries_T_107, next_value_35, entries_35) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_108 = eq(count, UInt<6>("h24")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_109 = and(io_push, _entries_T_108) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_110 = or(io_pop, _entries_T_109) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_36_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_36_T_1 = tail(_next_value_36_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_36_T_2 = eq(_next_value_36_T_1, UInt<6>("h24")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_36_T_3 = and(io_push, _next_value_36_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_37 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_37) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_36 = mux(io_pop, entries_37, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_36_T_4 = mux(_next_value_36_T_3, io_data_in, not_pushed_36) @[ShiftRegisterFifo.scala 33:16]
    node next_value_36 = _next_value_36_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_36 = mux(_entries_T_110, next_value_36, entries_36) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_111 = eq(count, UInt<6>("h25")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_112 = and(io_push, _entries_T_111) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_113 = or(io_pop, _entries_T_112) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_37_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_37_T_1 = tail(_next_value_37_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_37_T_2 = eq(_next_value_37_T_1, UInt<6>("h25")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_37_T_3 = and(io_push, _next_value_37_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_38 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_38) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_37 = mux(io_pop, entries_38, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_37_T_4 = mux(_next_value_37_T_3, io_data_in, not_pushed_37) @[ShiftRegisterFifo.scala 33:16]
    node next_value_37 = _next_value_37_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_37 = mux(_entries_T_113, next_value_37, entries_37) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_114 = eq(count, UInt<6>("h26")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_115 = and(io_push, _entries_T_114) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_116 = or(io_pop, _entries_T_115) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_38_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_38_T_1 = tail(_next_value_38_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_38_T_2 = eq(_next_value_38_T_1, UInt<6>("h26")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_38_T_3 = and(io_push, _next_value_38_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_39 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_39) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_38 = mux(io_pop, entries_39, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_38_T_4 = mux(_next_value_38_T_3, io_data_in, not_pushed_38) @[ShiftRegisterFifo.scala 33:16]
    node next_value_38 = _next_value_38_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_38 = mux(_entries_T_116, next_value_38, entries_38) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_117 = eq(count, UInt<6>("h27")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_118 = and(io_push, _entries_T_117) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_119 = or(io_pop, _entries_T_118) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_39_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_39_T_1 = tail(_next_value_39_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_39_T_2 = eq(_next_value_39_T_1, UInt<6>("h27")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_39_T_3 = and(io_push, _next_value_39_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_40 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_40) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_39 = mux(io_pop, entries_40, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_39_T_4 = mux(_next_value_39_T_3, io_data_in, not_pushed_39) @[ShiftRegisterFifo.scala 33:16]
    node next_value_39 = _next_value_39_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_39 = mux(_entries_T_119, next_value_39, entries_39) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_120 = eq(count, UInt<6>("h28")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_121 = and(io_push, _entries_T_120) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_122 = or(io_pop, _entries_T_121) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_40_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_40_T_1 = tail(_next_value_40_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_40_T_2 = eq(_next_value_40_T_1, UInt<6>("h28")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_40_T_3 = and(io_push, _next_value_40_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_41 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_41) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_40 = mux(io_pop, entries_41, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_40_T_4 = mux(_next_value_40_T_3, io_data_in, not_pushed_40) @[ShiftRegisterFifo.scala 33:16]
    node next_value_40 = _next_value_40_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_40 = mux(_entries_T_122, next_value_40, entries_40) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_123 = eq(count, UInt<6>("h29")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_124 = and(io_push, _entries_T_123) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_125 = or(io_pop, _entries_T_124) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_41_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_41_T_1 = tail(_next_value_41_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_41_T_2 = eq(_next_value_41_T_1, UInt<6>("h29")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_41_T_3 = and(io_push, _next_value_41_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_42 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_42) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_41 = mux(io_pop, entries_42, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_41_T_4 = mux(_next_value_41_T_3, io_data_in, not_pushed_41) @[ShiftRegisterFifo.scala 33:16]
    node next_value_41 = _next_value_41_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_41 = mux(_entries_T_125, next_value_41, entries_41) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_126 = eq(count, UInt<6>("h2a")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_127 = and(io_push, _entries_T_126) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_128 = or(io_pop, _entries_T_127) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_42_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_42_T_1 = tail(_next_value_42_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_42_T_2 = eq(_next_value_42_T_1, UInt<6>("h2a")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_42_T_3 = and(io_push, _next_value_42_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_43 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_43) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_42 = mux(io_pop, entries_43, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_42_T_4 = mux(_next_value_42_T_3, io_data_in, not_pushed_42) @[ShiftRegisterFifo.scala 33:16]
    node next_value_42 = _next_value_42_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_42 = mux(_entries_T_128, next_value_42, entries_42) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_129 = eq(count, UInt<6>("h2b")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_130 = and(io_push, _entries_T_129) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_131 = or(io_pop, _entries_T_130) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_43_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_43_T_1 = tail(_next_value_43_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_43_T_2 = eq(_next_value_43_T_1, UInt<6>("h2b")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_43_T_3 = and(io_push, _next_value_43_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_44 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_44) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_43 = mux(io_pop, entries_44, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_43_T_4 = mux(_next_value_43_T_3, io_data_in, not_pushed_43) @[ShiftRegisterFifo.scala 33:16]
    node next_value_43 = _next_value_43_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_43 = mux(_entries_T_131, next_value_43, entries_43) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_132 = eq(count, UInt<6>("h2c")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_133 = and(io_push, _entries_T_132) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_134 = or(io_pop, _entries_T_133) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_44_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_44_T_1 = tail(_next_value_44_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_44_T_2 = eq(_next_value_44_T_1, UInt<6>("h2c")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_44_T_3 = and(io_push, _next_value_44_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_45 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_45) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_44 = mux(io_pop, entries_45, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_44_T_4 = mux(_next_value_44_T_3, io_data_in, not_pushed_44) @[ShiftRegisterFifo.scala 33:16]
    node next_value_44 = _next_value_44_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_44 = mux(_entries_T_134, next_value_44, entries_44) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_135 = eq(count, UInt<6>("h2d")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_136 = and(io_push, _entries_T_135) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_137 = or(io_pop, _entries_T_136) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_45_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_45_T_1 = tail(_next_value_45_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_45_T_2 = eq(_next_value_45_T_1, UInt<6>("h2d")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_45_T_3 = and(io_push, _next_value_45_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_46 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_46) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_45 = mux(io_pop, entries_46, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_45_T_4 = mux(_next_value_45_T_3, io_data_in, not_pushed_45) @[ShiftRegisterFifo.scala 33:16]
    node next_value_45 = _next_value_45_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_45 = mux(_entries_T_137, next_value_45, entries_45) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_138 = eq(count, UInt<6>("h2e")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_139 = and(io_push, _entries_T_138) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_140 = or(io_pop, _entries_T_139) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_46_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_46_T_1 = tail(_next_value_46_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_46_T_2 = eq(_next_value_46_T_1, UInt<6>("h2e")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_46_T_3 = and(io_push, _next_value_46_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_47 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_47) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_46 = mux(io_pop, entries_47, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_46_T_4 = mux(_next_value_46_T_3, io_data_in, not_pushed_46) @[ShiftRegisterFifo.scala 33:16]
    node next_value_46 = _next_value_46_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_46 = mux(_entries_T_140, next_value_46, entries_46) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_141 = eq(count, UInt<6>("h2f")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_142 = and(io_push, _entries_T_141) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_143 = or(io_pop, _entries_T_142) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_47_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_47_T_1 = tail(_next_value_47_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_47_T_2 = eq(_next_value_47_T_1, UInt<6>("h2f")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_47_T_3 = and(io_push, _next_value_47_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_48 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_48) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_47 = mux(io_pop, entries_48, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_47_T_4 = mux(_next_value_47_T_3, io_data_in, not_pushed_47) @[ShiftRegisterFifo.scala 33:16]
    node next_value_47 = _next_value_47_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_47 = mux(_entries_T_143, next_value_47, entries_47) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_144 = eq(count, UInt<6>("h30")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_145 = and(io_push, _entries_T_144) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_146 = or(io_pop, _entries_T_145) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_48_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_48_T_1 = tail(_next_value_48_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_48_T_2 = eq(_next_value_48_T_1, UInt<6>("h30")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_48_T_3 = and(io_push, _next_value_48_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_49 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_49) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_48 = mux(io_pop, entries_49, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_48_T_4 = mux(_next_value_48_T_3, io_data_in, not_pushed_48) @[ShiftRegisterFifo.scala 33:16]
    node next_value_48 = _next_value_48_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_48 = mux(_entries_T_146, next_value_48, entries_48) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_147 = eq(count, UInt<6>("h31")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_148 = and(io_push, _entries_T_147) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_149 = or(io_pop, _entries_T_148) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_49_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_49_T_1 = tail(_next_value_49_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_49_T_2 = eq(_next_value_49_T_1, UInt<6>("h31")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_49_T_3 = and(io_push, _next_value_49_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_50 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_50) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_49 = mux(io_pop, entries_50, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_49_T_4 = mux(_next_value_49_T_3, io_data_in, not_pushed_49) @[ShiftRegisterFifo.scala 33:16]
    node next_value_49 = _next_value_49_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_49 = mux(_entries_T_149, next_value_49, entries_49) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_150 = eq(count, UInt<6>("h32")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_151 = and(io_push, _entries_T_150) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_152 = or(io_pop, _entries_T_151) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_50_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_50_T_1 = tail(_next_value_50_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_50_T_2 = eq(_next_value_50_T_1, UInt<6>("h32")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_50_T_3 = and(io_push, _next_value_50_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_51 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_51) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_50 = mux(io_pop, entries_51, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_50_T_4 = mux(_next_value_50_T_3, io_data_in, not_pushed_50) @[ShiftRegisterFifo.scala 33:16]
    node next_value_50 = _next_value_50_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_50 = mux(_entries_T_152, next_value_50, entries_50) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_153 = eq(count, UInt<6>("h33")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_154 = and(io_push, _entries_T_153) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_155 = or(io_pop, _entries_T_154) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_51_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_51_T_1 = tail(_next_value_51_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_51_T_2 = eq(_next_value_51_T_1, UInt<6>("h33")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_51_T_3 = and(io_push, _next_value_51_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_52 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_52) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_51 = mux(io_pop, entries_52, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_51_T_4 = mux(_next_value_51_T_3, io_data_in, not_pushed_51) @[ShiftRegisterFifo.scala 33:16]
    node next_value_51 = _next_value_51_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_51 = mux(_entries_T_155, next_value_51, entries_51) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_156 = eq(count, UInt<6>("h34")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_157 = and(io_push, _entries_T_156) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_158 = or(io_pop, _entries_T_157) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_52_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_52_T_1 = tail(_next_value_52_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_52_T_2 = eq(_next_value_52_T_1, UInt<6>("h34")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_52_T_3 = and(io_push, _next_value_52_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_53 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_53) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_52 = mux(io_pop, entries_53, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_52_T_4 = mux(_next_value_52_T_3, io_data_in, not_pushed_52) @[ShiftRegisterFifo.scala 33:16]
    node next_value_52 = _next_value_52_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_52 = mux(_entries_T_158, next_value_52, entries_52) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_159 = eq(count, UInt<6>("h35")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_160 = and(io_push, _entries_T_159) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_161 = or(io_pop, _entries_T_160) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_53_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_53_T_1 = tail(_next_value_53_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_53_T_2 = eq(_next_value_53_T_1, UInt<6>("h35")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_53_T_3 = and(io_push, _next_value_53_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_54 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_54) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_53 = mux(io_pop, entries_54, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_53_T_4 = mux(_next_value_53_T_3, io_data_in, not_pushed_53) @[ShiftRegisterFifo.scala 33:16]
    node next_value_53 = _next_value_53_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_53 = mux(_entries_T_161, next_value_53, entries_53) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_162 = eq(count, UInt<6>("h36")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_163 = and(io_push, _entries_T_162) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_164 = or(io_pop, _entries_T_163) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_54_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_54_T_1 = tail(_next_value_54_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_54_T_2 = eq(_next_value_54_T_1, UInt<6>("h36")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_54_T_3 = and(io_push, _next_value_54_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_55 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_55) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_54 = mux(io_pop, entries_55, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_54_T_4 = mux(_next_value_54_T_3, io_data_in, not_pushed_54) @[ShiftRegisterFifo.scala 33:16]
    node next_value_54 = _next_value_54_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_54 = mux(_entries_T_164, next_value_54, entries_54) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_165 = eq(count, UInt<6>("h37")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_166 = and(io_push, _entries_T_165) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_167 = or(io_pop, _entries_T_166) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_55_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_55_T_1 = tail(_next_value_55_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_55_T_2 = eq(_next_value_55_T_1, UInt<6>("h37")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_55_T_3 = and(io_push, _next_value_55_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_56 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_56) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_55 = mux(io_pop, entries_56, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_55_T_4 = mux(_next_value_55_T_3, io_data_in, not_pushed_55) @[ShiftRegisterFifo.scala 33:16]
    node next_value_55 = _next_value_55_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_55 = mux(_entries_T_167, next_value_55, entries_55) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_168 = eq(count, UInt<6>("h38")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_169 = and(io_push, _entries_T_168) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_170 = or(io_pop, _entries_T_169) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_56_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_56_T_1 = tail(_next_value_56_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_56_T_2 = eq(_next_value_56_T_1, UInt<6>("h38")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_56_T_3 = and(io_push, _next_value_56_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_57 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_57) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_56 = mux(io_pop, entries_57, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_56_T_4 = mux(_next_value_56_T_3, io_data_in, not_pushed_56) @[ShiftRegisterFifo.scala 33:16]
    node next_value_56 = _next_value_56_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_56 = mux(_entries_T_170, next_value_56, entries_56) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_171 = eq(count, UInt<6>("h39")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_172 = and(io_push, _entries_T_171) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_173 = or(io_pop, _entries_T_172) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_57_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_57_T_1 = tail(_next_value_57_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_57_T_2 = eq(_next_value_57_T_1, UInt<6>("h39")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_57_T_3 = and(io_push, _next_value_57_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_58 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_58) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_57 = mux(io_pop, entries_58, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_57_T_4 = mux(_next_value_57_T_3, io_data_in, not_pushed_57) @[ShiftRegisterFifo.scala 33:16]
    node next_value_57 = _next_value_57_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_57 = mux(_entries_T_173, next_value_57, entries_57) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_174 = eq(count, UInt<6>("h3a")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_175 = and(io_push, _entries_T_174) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_176 = or(io_pop, _entries_T_175) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_58_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_58_T_1 = tail(_next_value_58_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_58_T_2 = eq(_next_value_58_T_1, UInt<6>("h3a")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_58_T_3 = and(io_push, _next_value_58_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_59 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_59) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_58 = mux(io_pop, entries_59, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_58_T_4 = mux(_next_value_58_T_3, io_data_in, not_pushed_58) @[ShiftRegisterFifo.scala 33:16]
    node next_value_58 = _next_value_58_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_58 = mux(_entries_T_176, next_value_58, entries_58) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_177 = eq(count, UInt<6>("h3b")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_178 = and(io_push, _entries_T_177) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_179 = or(io_pop, _entries_T_178) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_59_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_59_T_1 = tail(_next_value_59_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_59_T_2 = eq(_next_value_59_T_1, UInt<6>("h3b")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_59_T_3 = and(io_push, _next_value_59_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_60 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_60) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_59 = mux(io_pop, entries_60, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_59_T_4 = mux(_next_value_59_T_3, io_data_in, not_pushed_59) @[ShiftRegisterFifo.scala 33:16]
    node next_value_59 = _next_value_59_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_59 = mux(_entries_T_179, next_value_59, entries_59) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_180 = eq(count, UInt<6>("h3c")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_181 = and(io_push, _entries_T_180) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_182 = or(io_pop, _entries_T_181) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_60_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_60_T_1 = tail(_next_value_60_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_60_T_2 = eq(_next_value_60_T_1, UInt<6>("h3c")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_60_T_3 = and(io_push, _next_value_60_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_61 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_61) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_60 = mux(io_pop, entries_61, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_60_T_4 = mux(_next_value_60_T_3, io_data_in, not_pushed_60) @[ShiftRegisterFifo.scala 33:16]
    node next_value_60 = _next_value_60_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_60 = mux(_entries_T_182, next_value_60, entries_60) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_183 = eq(count, UInt<6>("h3d")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_184 = and(io_push, _entries_T_183) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_185 = or(io_pop, _entries_T_184) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_61_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_61_T_1 = tail(_next_value_61_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_61_T_2 = eq(_next_value_61_T_1, UInt<6>("h3d")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_61_T_3 = and(io_push, _next_value_61_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_62 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_62) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_61 = mux(io_pop, entries_62, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_61_T_4 = mux(_next_value_61_T_3, io_data_in, not_pushed_61) @[ShiftRegisterFifo.scala 33:16]
    node next_value_61 = _next_value_61_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_61 = mux(_entries_T_185, next_value_61, entries_61) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_186 = eq(count, UInt<6>("h3e")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_187 = and(io_push, _entries_T_186) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_188 = or(io_pop, _entries_T_187) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_62_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_62_T_1 = tail(_next_value_62_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_62_T_2 = eq(_next_value_62_T_1, UInt<6>("h3e")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_62_T_3 = and(io_push, _next_value_62_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_63 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_63) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_62 = mux(io_pop, entries_63, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_62_T_4 = mux(_next_value_62_T_3, io_data_in, not_pushed_62) @[ShiftRegisterFifo.scala 33:16]
    node next_value_62 = _next_value_62_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_62 = mux(_entries_T_188, next_value_62, entries_62) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_189 = eq(count, UInt<6>("h3f")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_190 = and(io_push, _entries_T_189) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_191 = or(io_pop, _entries_T_190) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_63_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_63_T_1 = tail(_next_value_63_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_63_T_2 = eq(_next_value_63_T_1, UInt<6>("h3f")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_63_T_3 = and(io_push, _next_value_63_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_64 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_64) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_63 = mux(io_pop, entries_64, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_63_T_4 = mux(_next_value_63_T_3, io_data_in, not_pushed_63) @[ShiftRegisterFifo.scala 33:16]
    node next_value_63 = _next_value_63_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_63 = mux(_entries_T_191, next_value_63, entries_63) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_192 = eq(count, UInt<7>("h40")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_193 = and(io_push, _entries_T_192) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_194 = or(io_pop, _entries_T_193) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_64_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_64_T_1 = tail(_next_value_64_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_64_T_2 = eq(_next_value_64_T_1, UInt<7>("h40")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_64_T_3 = and(io_push, _next_value_64_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_65 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_65) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_64 = mux(io_pop, entries_65, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_64_T_4 = mux(_next_value_64_T_3, io_data_in, not_pushed_64) @[ShiftRegisterFifo.scala 33:16]
    node next_value_64 = _next_value_64_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_64 = mux(_entries_T_194, next_value_64, entries_64) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_195 = eq(count, UInt<7>("h41")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_196 = and(io_push, _entries_T_195) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_197 = or(io_pop, _entries_T_196) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_65_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_65_T_1 = tail(_next_value_65_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_65_T_2 = eq(_next_value_65_T_1, UInt<7>("h41")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_65_T_3 = and(io_push, _next_value_65_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_66 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_66) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_65 = mux(io_pop, entries_66, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_65_T_4 = mux(_next_value_65_T_3, io_data_in, not_pushed_65) @[ShiftRegisterFifo.scala 33:16]
    node next_value_65 = _next_value_65_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_65 = mux(_entries_T_197, next_value_65, entries_65) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_198 = eq(count, UInt<7>("h42")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_199 = and(io_push, _entries_T_198) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_200 = or(io_pop, _entries_T_199) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_66_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_66_T_1 = tail(_next_value_66_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_66_T_2 = eq(_next_value_66_T_1, UInt<7>("h42")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_66_T_3 = and(io_push, _next_value_66_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_67 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_67) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_66 = mux(io_pop, entries_67, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_66_T_4 = mux(_next_value_66_T_3, io_data_in, not_pushed_66) @[ShiftRegisterFifo.scala 33:16]
    node next_value_66 = _next_value_66_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_66 = mux(_entries_T_200, next_value_66, entries_66) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_201 = eq(count, UInt<7>("h43")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_202 = and(io_push, _entries_T_201) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_203 = or(io_pop, _entries_T_202) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_67_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_67_T_1 = tail(_next_value_67_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_67_T_2 = eq(_next_value_67_T_1, UInt<7>("h43")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_67_T_3 = and(io_push, _next_value_67_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_68 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_68) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_67 = mux(io_pop, entries_68, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_67_T_4 = mux(_next_value_67_T_3, io_data_in, not_pushed_67) @[ShiftRegisterFifo.scala 33:16]
    node next_value_67 = _next_value_67_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_67 = mux(_entries_T_203, next_value_67, entries_67) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_204 = eq(count, UInt<7>("h44")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_205 = and(io_push, _entries_T_204) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_206 = or(io_pop, _entries_T_205) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_68_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_68_T_1 = tail(_next_value_68_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_68_T_2 = eq(_next_value_68_T_1, UInt<7>("h44")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_68_T_3 = and(io_push, _next_value_68_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_69 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_69) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_68 = mux(io_pop, entries_69, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_68_T_4 = mux(_next_value_68_T_3, io_data_in, not_pushed_68) @[ShiftRegisterFifo.scala 33:16]
    node next_value_68 = _next_value_68_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_68 = mux(_entries_T_206, next_value_68, entries_68) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_207 = eq(count, UInt<7>("h45")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_208 = and(io_push, _entries_T_207) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_209 = or(io_pop, _entries_T_208) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_69_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_69_T_1 = tail(_next_value_69_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_69_T_2 = eq(_next_value_69_T_1, UInt<7>("h45")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_69_T_3 = and(io_push, _next_value_69_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_70 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_70) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_69 = mux(io_pop, entries_70, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_69_T_4 = mux(_next_value_69_T_3, io_data_in, not_pushed_69) @[ShiftRegisterFifo.scala 33:16]
    node next_value_69 = _next_value_69_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_69 = mux(_entries_T_209, next_value_69, entries_69) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_210 = eq(count, UInt<7>("h46")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_211 = and(io_push, _entries_T_210) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_212 = or(io_pop, _entries_T_211) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_70_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_70_T_1 = tail(_next_value_70_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_70_T_2 = eq(_next_value_70_T_1, UInt<7>("h46")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_70_T_3 = and(io_push, _next_value_70_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_71 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_71) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_70 = mux(io_pop, entries_71, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_70_T_4 = mux(_next_value_70_T_3, io_data_in, not_pushed_70) @[ShiftRegisterFifo.scala 33:16]
    node next_value_70 = _next_value_70_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_70 = mux(_entries_T_212, next_value_70, entries_70) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_213 = eq(count, UInt<7>("h47")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_214 = and(io_push, _entries_T_213) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_215 = or(io_pop, _entries_T_214) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_71_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_71_T_1 = tail(_next_value_71_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_71_T_2 = eq(_next_value_71_T_1, UInt<7>("h47")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_71_T_3 = and(io_push, _next_value_71_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_72 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_72) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_71 = mux(io_pop, entries_72, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_71_T_4 = mux(_next_value_71_T_3, io_data_in, not_pushed_71) @[ShiftRegisterFifo.scala 33:16]
    node next_value_71 = _next_value_71_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_71 = mux(_entries_T_215, next_value_71, entries_71) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_216 = eq(count, UInt<7>("h48")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_217 = and(io_push, _entries_T_216) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_218 = or(io_pop, _entries_T_217) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_72_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_72_T_1 = tail(_next_value_72_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_72_T_2 = eq(_next_value_72_T_1, UInt<7>("h48")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_72_T_3 = and(io_push, _next_value_72_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_73 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_73) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_72 = mux(io_pop, entries_73, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_72_T_4 = mux(_next_value_72_T_3, io_data_in, not_pushed_72) @[ShiftRegisterFifo.scala 33:16]
    node next_value_72 = _next_value_72_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_72 = mux(_entries_T_218, next_value_72, entries_72) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_219 = eq(count, UInt<7>("h49")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_220 = and(io_push, _entries_T_219) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_221 = or(io_pop, _entries_T_220) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_73_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_73_T_1 = tail(_next_value_73_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_73_T_2 = eq(_next_value_73_T_1, UInt<7>("h49")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_73_T_3 = and(io_push, _next_value_73_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_74 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_74) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_73 = mux(io_pop, entries_74, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_73_T_4 = mux(_next_value_73_T_3, io_data_in, not_pushed_73) @[ShiftRegisterFifo.scala 33:16]
    node next_value_73 = _next_value_73_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_73 = mux(_entries_T_221, next_value_73, entries_73) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_222 = eq(count, UInt<7>("h4a")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_223 = and(io_push, _entries_T_222) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_224 = or(io_pop, _entries_T_223) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_74_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_74_T_1 = tail(_next_value_74_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_74_T_2 = eq(_next_value_74_T_1, UInt<7>("h4a")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_74_T_3 = and(io_push, _next_value_74_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_75 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_75) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_74 = mux(io_pop, entries_75, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_74_T_4 = mux(_next_value_74_T_3, io_data_in, not_pushed_74) @[ShiftRegisterFifo.scala 33:16]
    node next_value_74 = _next_value_74_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_74 = mux(_entries_T_224, next_value_74, entries_74) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_225 = eq(count, UInt<7>("h4b")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_226 = and(io_push, _entries_T_225) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_227 = or(io_pop, _entries_T_226) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_75_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_75_T_1 = tail(_next_value_75_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_75_T_2 = eq(_next_value_75_T_1, UInt<7>("h4b")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_75_T_3 = and(io_push, _next_value_75_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_76 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_76) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_75 = mux(io_pop, entries_76, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_75_T_4 = mux(_next_value_75_T_3, io_data_in, not_pushed_75) @[ShiftRegisterFifo.scala 33:16]
    node next_value_75 = _next_value_75_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_75 = mux(_entries_T_227, next_value_75, entries_75) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_228 = eq(count, UInt<7>("h4c")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_229 = and(io_push, _entries_T_228) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_230 = or(io_pop, _entries_T_229) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_76_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_76_T_1 = tail(_next_value_76_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_76_T_2 = eq(_next_value_76_T_1, UInt<7>("h4c")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_76_T_3 = and(io_push, _next_value_76_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_77 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_77) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_76 = mux(io_pop, entries_77, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_76_T_4 = mux(_next_value_76_T_3, io_data_in, not_pushed_76) @[ShiftRegisterFifo.scala 33:16]
    node next_value_76 = _next_value_76_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_76 = mux(_entries_T_230, next_value_76, entries_76) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_231 = eq(count, UInt<7>("h4d")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_232 = and(io_push, _entries_T_231) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_233 = or(io_pop, _entries_T_232) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_77_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_77_T_1 = tail(_next_value_77_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_77_T_2 = eq(_next_value_77_T_1, UInt<7>("h4d")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_77_T_3 = and(io_push, _next_value_77_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_78 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_78) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_77 = mux(io_pop, entries_78, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_77_T_4 = mux(_next_value_77_T_3, io_data_in, not_pushed_77) @[ShiftRegisterFifo.scala 33:16]
    node next_value_77 = _next_value_77_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_77 = mux(_entries_T_233, next_value_77, entries_77) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_234 = eq(count, UInt<7>("h4e")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_235 = and(io_push, _entries_T_234) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_236 = or(io_pop, _entries_T_235) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_78_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_78_T_1 = tail(_next_value_78_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_78_T_2 = eq(_next_value_78_T_1, UInt<7>("h4e")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_78_T_3 = and(io_push, _next_value_78_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_79 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_79) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_78 = mux(io_pop, entries_79, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_78_T_4 = mux(_next_value_78_T_3, io_data_in, not_pushed_78) @[ShiftRegisterFifo.scala 33:16]
    node next_value_78 = _next_value_78_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_78 = mux(_entries_T_236, next_value_78, entries_78) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_237 = eq(count, UInt<7>("h4f")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_238 = and(io_push, _entries_T_237) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_239 = or(io_pop, _entries_T_238) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_79_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_79_T_1 = tail(_next_value_79_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_79_T_2 = eq(_next_value_79_T_1, UInt<7>("h4f")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_79_T_3 = and(io_push, _next_value_79_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_80 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_80) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_79 = mux(io_pop, entries_80, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_79_T_4 = mux(_next_value_79_T_3, io_data_in, not_pushed_79) @[ShiftRegisterFifo.scala 33:16]
    node next_value_79 = _next_value_79_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_79 = mux(_entries_T_239, next_value_79, entries_79) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_240 = eq(count, UInt<7>("h50")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_241 = and(io_push, _entries_T_240) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_242 = or(io_pop, _entries_T_241) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_80_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_80_T_1 = tail(_next_value_80_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_80_T_2 = eq(_next_value_80_T_1, UInt<7>("h50")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_80_T_3 = and(io_push, _next_value_80_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_81 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_81) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_80 = mux(io_pop, entries_81, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_80_T_4 = mux(_next_value_80_T_3, io_data_in, not_pushed_80) @[ShiftRegisterFifo.scala 33:16]
    node next_value_80 = _next_value_80_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_80 = mux(_entries_T_242, next_value_80, entries_80) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_243 = eq(count, UInt<7>("h51")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_244 = and(io_push, _entries_T_243) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_245 = or(io_pop, _entries_T_244) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_81_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_81_T_1 = tail(_next_value_81_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_81_T_2 = eq(_next_value_81_T_1, UInt<7>("h51")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_81_T_3 = and(io_push, _next_value_81_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_82 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_82) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_81 = mux(io_pop, entries_82, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_81_T_4 = mux(_next_value_81_T_3, io_data_in, not_pushed_81) @[ShiftRegisterFifo.scala 33:16]
    node next_value_81 = _next_value_81_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_81 = mux(_entries_T_245, next_value_81, entries_81) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_246 = eq(count, UInt<7>("h52")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_247 = and(io_push, _entries_T_246) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_248 = or(io_pop, _entries_T_247) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_82_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_82_T_1 = tail(_next_value_82_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_82_T_2 = eq(_next_value_82_T_1, UInt<7>("h52")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_82_T_3 = and(io_push, _next_value_82_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_83 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_83) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_82 = mux(io_pop, entries_83, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_82_T_4 = mux(_next_value_82_T_3, io_data_in, not_pushed_82) @[ShiftRegisterFifo.scala 33:16]
    node next_value_82 = _next_value_82_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_82 = mux(_entries_T_248, next_value_82, entries_82) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_249 = eq(count, UInt<7>("h53")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_250 = and(io_push, _entries_T_249) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_251 = or(io_pop, _entries_T_250) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_83_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_83_T_1 = tail(_next_value_83_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_83_T_2 = eq(_next_value_83_T_1, UInt<7>("h53")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_83_T_3 = and(io_push, _next_value_83_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_84 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_84) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_83 = mux(io_pop, entries_84, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_83_T_4 = mux(_next_value_83_T_3, io_data_in, not_pushed_83) @[ShiftRegisterFifo.scala 33:16]
    node next_value_83 = _next_value_83_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_83 = mux(_entries_T_251, next_value_83, entries_83) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_252 = eq(count, UInt<7>("h54")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_253 = and(io_push, _entries_T_252) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_254 = or(io_pop, _entries_T_253) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_84_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_84_T_1 = tail(_next_value_84_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_84_T_2 = eq(_next_value_84_T_1, UInt<7>("h54")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_84_T_3 = and(io_push, _next_value_84_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_85 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_85) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_84 = mux(io_pop, entries_85, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_84_T_4 = mux(_next_value_84_T_3, io_data_in, not_pushed_84) @[ShiftRegisterFifo.scala 33:16]
    node next_value_84 = _next_value_84_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_84 = mux(_entries_T_254, next_value_84, entries_84) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_255 = eq(count, UInt<7>("h55")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_256 = and(io_push, _entries_T_255) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_257 = or(io_pop, _entries_T_256) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_85_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_85_T_1 = tail(_next_value_85_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_85_T_2 = eq(_next_value_85_T_1, UInt<7>("h55")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_85_T_3 = and(io_push, _next_value_85_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_86 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_86) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_85 = mux(io_pop, entries_86, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_85_T_4 = mux(_next_value_85_T_3, io_data_in, not_pushed_85) @[ShiftRegisterFifo.scala 33:16]
    node next_value_85 = _next_value_85_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_85 = mux(_entries_T_257, next_value_85, entries_85) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_258 = eq(count, UInt<7>("h56")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_259 = and(io_push, _entries_T_258) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_260 = or(io_pop, _entries_T_259) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_86_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_86_T_1 = tail(_next_value_86_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_86_T_2 = eq(_next_value_86_T_1, UInt<7>("h56")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_86_T_3 = and(io_push, _next_value_86_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_87 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_87) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_86 = mux(io_pop, entries_87, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_86_T_4 = mux(_next_value_86_T_3, io_data_in, not_pushed_86) @[ShiftRegisterFifo.scala 33:16]
    node next_value_86 = _next_value_86_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_86 = mux(_entries_T_260, next_value_86, entries_86) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_261 = eq(count, UInt<7>("h57")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_262 = and(io_push, _entries_T_261) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_263 = or(io_pop, _entries_T_262) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_87_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_87_T_1 = tail(_next_value_87_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_87_T_2 = eq(_next_value_87_T_1, UInt<7>("h57")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_87_T_3 = and(io_push, _next_value_87_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_88 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_88) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_87 = mux(io_pop, entries_88, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_87_T_4 = mux(_next_value_87_T_3, io_data_in, not_pushed_87) @[ShiftRegisterFifo.scala 33:16]
    node next_value_87 = _next_value_87_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_87 = mux(_entries_T_263, next_value_87, entries_87) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_264 = eq(count, UInt<7>("h58")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_265 = and(io_push, _entries_T_264) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_266 = or(io_pop, _entries_T_265) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_88_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_88_T_1 = tail(_next_value_88_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_88_T_2 = eq(_next_value_88_T_1, UInt<7>("h58")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_88_T_3 = and(io_push, _next_value_88_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_89 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_89) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_88 = mux(io_pop, entries_89, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_88_T_4 = mux(_next_value_88_T_3, io_data_in, not_pushed_88) @[ShiftRegisterFifo.scala 33:16]
    node next_value_88 = _next_value_88_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_88 = mux(_entries_T_266, next_value_88, entries_88) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_267 = eq(count, UInt<7>("h59")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_268 = and(io_push, _entries_T_267) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_269 = or(io_pop, _entries_T_268) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_89_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_89_T_1 = tail(_next_value_89_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_89_T_2 = eq(_next_value_89_T_1, UInt<7>("h59")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_89_T_3 = and(io_push, _next_value_89_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_90 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_90) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_89 = mux(io_pop, entries_90, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_89_T_4 = mux(_next_value_89_T_3, io_data_in, not_pushed_89) @[ShiftRegisterFifo.scala 33:16]
    node next_value_89 = _next_value_89_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_89 = mux(_entries_T_269, next_value_89, entries_89) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_270 = eq(count, UInt<7>("h5a")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_271 = and(io_push, _entries_T_270) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_272 = or(io_pop, _entries_T_271) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_90_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_90_T_1 = tail(_next_value_90_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_90_T_2 = eq(_next_value_90_T_1, UInt<7>("h5a")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_90_T_3 = and(io_push, _next_value_90_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_91 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_91) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_90 = mux(io_pop, entries_91, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_90_T_4 = mux(_next_value_90_T_3, io_data_in, not_pushed_90) @[ShiftRegisterFifo.scala 33:16]
    node next_value_90 = _next_value_90_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_90 = mux(_entries_T_272, next_value_90, entries_90) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_273 = eq(count, UInt<7>("h5b")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_274 = and(io_push, _entries_T_273) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_275 = or(io_pop, _entries_T_274) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_91_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_91_T_1 = tail(_next_value_91_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_91_T_2 = eq(_next_value_91_T_1, UInt<7>("h5b")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_91_T_3 = and(io_push, _next_value_91_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_92 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_92) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_91 = mux(io_pop, entries_92, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_91_T_4 = mux(_next_value_91_T_3, io_data_in, not_pushed_91) @[ShiftRegisterFifo.scala 33:16]
    node next_value_91 = _next_value_91_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_91 = mux(_entries_T_275, next_value_91, entries_91) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_276 = eq(count, UInt<7>("h5c")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_277 = and(io_push, _entries_T_276) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_278 = or(io_pop, _entries_T_277) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_92_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_92_T_1 = tail(_next_value_92_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_92_T_2 = eq(_next_value_92_T_1, UInt<7>("h5c")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_92_T_3 = and(io_push, _next_value_92_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_93 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_93) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_92 = mux(io_pop, entries_93, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_92_T_4 = mux(_next_value_92_T_3, io_data_in, not_pushed_92) @[ShiftRegisterFifo.scala 33:16]
    node next_value_92 = _next_value_92_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_92 = mux(_entries_T_278, next_value_92, entries_92) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_279 = eq(count, UInt<7>("h5d")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_280 = and(io_push, _entries_T_279) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_281 = or(io_pop, _entries_T_280) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_93_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_93_T_1 = tail(_next_value_93_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_93_T_2 = eq(_next_value_93_T_1, UInt<7>("h5d")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_93_T_3 = and(io_push, _next_value_93_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_94 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_94) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_93 = mux(io_pop, entries_94, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_93_T_4 = mux(_next_value_93_T_3, io_data_in, not_pushed_93) @[ShiftRegisterFifo.scala 33:16]
    node next_value_93 = _next_value_93_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_93 = mux(_entries_T_281, next_value_93, entries_93) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_282 = eq(count, UInt<7>("h5e")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_283 = and(io_push, _entries_T_282) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_284 = or(io_pop, _entries_T_283) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_94_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_94_T_1 = tail(_next_value_94_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_94_T_2 = eq(_next_value_94_T_1, UInt<7>("h5e")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_94_T_3 = and(io_push, _next_value_94_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_95 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_95) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_94 = mux(io_pop, entries_95, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_94_T_4 = mux(_next_value_94_T_3, io_data_in, not_pushed_94) @[ShiftRegisterFifo.scala 33:16]
    node next_value_94 = _next_value_94_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_94 = mux(_entries_T_284, next_value_94, entries_94) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_285 = eq(count, UInt<7>("h5f")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_286 = and(io_push, _entries_T_285) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_287 = or(io_pop, _entries_T_286) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_95_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_95_T_1 = tail(_next_value_95_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_95_T_2 = eq(_next_value_95_T_1, UInt<7>("h5f")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_95_T_3 = and(io_push, _next_value_95_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_96 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_96) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_95 = mux(io_pop, entries_96, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_95_T_4 = mux(_next_value_95_T_3, io_data_in, not_pushed_95) @[ShiftRegisterFifo.scala 33:16]
    node next_value_95 = _next_value_95_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_95 = mux(_entries_T_287, next_value_95, entries_95) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_288 = eq(count, UInt<7>("h60")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_289 = and(io_push, _entries_T_288) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_290 = or(io_pop, _entries_T_289) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_96_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_96_T_1 = tail(_next_value_96_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_96_T_2 = eq(_next_value_96_T_1, UInt<7>("h60")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_96_T_3 = and(io_push, _next_value_96_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_97 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_97) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_96 = mux(io_pop, entries_97, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_96_T_4 = mux(_next_value_96_T_3, io_data_in, not_pushed_96) @[ShiftRegisterFifo.scala 33:16]
    node next_value_96 = _next_value_96_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_96 = mux(_entries_T_290, next_value_96, entries_96) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_291 = eq(count, UInt<7>("h61")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_292 = and(io_push, _entries_T_291) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_293 = or(io_pop, _entries_T_292) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_97_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_97_T_1 = tail(_next_value_97_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_97_T_2 = eq(_next_value_97_T_1, UInt<7>("h61")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_97_T_3 = and(io_push, _next_value_97_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_98 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_98) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_97 = mux(io_pop, entries_98, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_97_T_4 = mux(_next_value_97_T_3, io_data_in, not_pushed_97) @[ShiftRegisterFifo.scala 33:16]
    node next_value_97 = _next_value_97_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_97 = mux(_entries_T_293, next_value_97, entries_97) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_294 = eq(count, UInt<7>("h62")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_295 = and(io_push, _entries_T_294) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_296 = or(io_pop, _entries_T_295) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_98_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_98_T_1 = tail(_next_value_98_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_98_T_2 = eq(_next_value_98_T_1, UInt<7>("h62")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_98_T_3 = and(io_push, _next_value_98_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_99 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_99) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_98 = mux(io_pop, entries_99, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_98_T_4 = mux(_next_value_98_T_3, io_data_in, not_pushed_98) @[ShiftRegisterFifo.scala 33:16]
    node next_value_98 = _next_value_98_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_98 = mux(_entries_T_296, next_value_98, entries_98) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_297 = eq(count, UInt<7>("h63")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_298 = and(io_push, _entries_T_297) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_299 = or(io_pop, _entries_T_298) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_99_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_99_T_1 = tail(_next_value_99_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_99_T_2 = eq(_next_value_99_T_1, UInt<7>("h63")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_99_T_3 = and(io_push, _next_value_99_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_100 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_100) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_99 = mux(io_pop, entries_100, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_99_T_4 = mux(_next_value_99_T_3, io_data_in, not_pushed_99) @[ShiftRegisterFifo.scala 33:16]
    node next_value_99 = _next_value_99_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_99 = mux(_entries_T_299, next_value_99, entries_99) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_300 = eq(count, UInt<7>("h64")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_301 = and(io_push, _entries_T_300) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_302 = or(io_pop, _entries_T_301) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_100_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_100_T_1 = tail(_next_value_100_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_100_T_2 = eq(_next_value_100_T_1, UInt<7>("h64")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_100_T_3 = and(io_push, _next_value_100_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_101 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_101) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_100 = mux(io_pop, entries_101, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_100_T_4 = mux(_next_value_100_T_3, io_data_in, not_pushed_100) @[ShiftRegisterFifo.scala 33:16]
    node next_value_100 = _next_value_100_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_100 = mux(_entries_T_302, next_value_100, entries_100) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_303 = eq(count, UInt<7>("h65")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_304 = and(io_push, _entries_T_303) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_305 = or(io_pop, _entries_T_304) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_101_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_101_T_1 = tail(_next_value_101_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_101_T_2 = eq(_next_value_101_T_1, UInt<7>("h65")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_101_T_3 = and(io_push, _next_value_101_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_102 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_102) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_101 = mux(io_pop, entries_102, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_101_T_4 = mux(_next_value_101_T_3, io_data_in, not_pushed_101) @[ShiftRegisterFifo.scala 33:16]
    node next_value_101 = _next_value_101_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_101 = mux(_entries_T_305, next_value_101, entries_101) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_306 = eq(count, UInt<7>("h66")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_307 = and(io_push, _entries_T_306) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_308 = or(io_pop, _entries_T_307) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_102_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_102_T_1 = tail(_next_value_102_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_102_T_2 = eq(_next_value_102_T_1, UInt<7>("h66")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_102_T_3 = and(io_push, _next_value_102_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_103 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_103) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_102 = mux(io_pop, entries_103, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_102_T_4 = mux(_next_value_102_T_3, io_data_in, not_pushed_102) @[ShiftRegisterFifo.scala 33:16]
    node next_value_102 = _next_value_102_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_102 = mux(_entries_T_308, next_value_102, entries_102) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_309 = eq(count, UInt<7>("h67")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_310 = and(io_push, _entries_T_309) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_311 = or(io_pop, _entries_T_310) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_103_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_103_T_1 = tail(_next_value_103_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_103_T_2 = eq(_next_value_103_T_1, UInt<7>("h67")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_103_T_3 = and(io_push, _next_value_103_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_104 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_104) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_103 = mux(io_pop, entries_104, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_103_T_4 = mux(_next_value_103_T_3, io_data_in, not_pushed_103) @[ShiftRegisterFifo.scala 33:16]
    node next_value_103 = _next_value_103_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_103 = mux(_entries_T_311, next_value_103, entries_103) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_312 = eq(count, UInt<7>("h68")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_313 = and(io_push, _entries_T_312) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_314 = or(io_pop, _entries_T_313) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_104_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_104_T_1 = tail(_next_value_104_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_104_T_2 = eq(_next_value_104_T_1, UInt<7>("h68")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_104_T_3 = and(io_push, _next_value_104_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_105 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_105) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_104 = mux(io_pop, entries_105, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_104_T_4 = mux(_next_value_104_T_3, io_data_in, not_pushed_104) @[ShiftRegisterFifo.scala 33:16]
    node next_value_104 = _next_value_104_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_104 = mux(_entries_T_314, next_value_104, entries_104) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_315 = eq(count, UInt<7>("h69")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_316 = and(io_push, _entries_T_315) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_317 = or(io_pop, _entries_T_316) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_105_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_105_T_1 = tail(_next_value_105_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_105_T_2 = eq(_next_value_105_T_1, UInt<7>("h69")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_105_T_3 = and(io_push, _next_value_105_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_106 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_106) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_105 = mux(io_pop, entries_106, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_105_T_4 = mux(_next_value_105_T_3, io_data_in, not_pushed_105) @[ShiftRegisterFifo.scala 33:16]
    node next_value_105 = _next_value_105_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_105 = mux(_entries_T_317, next_value_105, entries_105) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_318 = eq(count, UInt<7>("h6a")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_319 = and(io_push, _entries_T_318) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_320 = or(io_pop, _entries_T_319) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_106_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_106_T_1 = tail(_next_value_106_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_106_T_2 = eq(_next_value_106_T_1, UInt<7>("h6a")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_106_T_3 = and(io_push, _next_value_106_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_107 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_107) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_106 = mux(io_pop, entries_107, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_106_T_4 = mux(_next_value_106_T_3, io_data_in, not_pushed_106) @[ShiftRegisterFifo.scala 33:16]
    node next_value_106 = _next_value_106_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_106 = mux(_entries_T_320, next_value_106, entries_106) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_321 = eq(count, UInt<7>("h6b")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_322 = and(io_push, _entries_T_321) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_323 = or(io_pop, _entries_T_322) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_107_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_107_T_1 = tail(_next_value_107_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_107_T_2 = eq(_next_value_107_T_1, UInt<7>("h6b")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_107_T_3 = and(io_push, _next_value_107_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_108 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_108) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_107 = mux(io_pop, entries_108, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_107_T_4 = mux(_next_value_107_T_3, io_data_in, not_pushed_107) @[ShiftRegisterFifo.scala 33:16]
    node next_value_107 = _next_value_107_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_107 = mux(_entries_T_323, next_value_107, entries_107) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_324 = eq(count, UInt<7>("h6c")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_325 = and(io_push, _entries_T_324) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_326 = or(io_pop, _entries_T_325) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_108_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_108_T_1 = tail(_next_value_108_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_108_T_2 = eq(_next_value_108_T_1, UInt<7>("h6c")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_108_T_3 = and(io_push, _next_value_108_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_109 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_109) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_108 = mux(io_pop, entries_109, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_108_T_4 = mux(_next_value_108_T_3, io_data_in, not_pushed_108) @[ShiftRegisterFifo.scala 33:16]
    node next_value_108 = _next_value_108_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_108 = mux(_entries_T_326, next_value_108, entries_108) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_327 = eq(count, UInt<7>("h6d")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_328 = and(io_push, _entries_T_327) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_329 = or(io_pop, _entries_T_328) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_109_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_109_T_1 = tail(_next_value_109_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_109_T_2 = eq(_next_value_109_T_1, UInt<7>("h6d")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_109_T_3 = and(io_push, _next_value_109_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_110 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_110) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_109 = mux(io_pop, entries_110, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_109_T_4 = mux(_next_value_109_T_3, io_data_in, not_pushed_109) @[ShiftRegisterFifo.scala 33:16]
    node next_value_109 = _next_value_109_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_109 = mux(_entries_T_329, next_value_109, entries_109) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_330 = eq(count, UInt<7>("h6e")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_331 = and(io_push, _entries_T_330) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_332 = or(io_pop, _entries_T_331) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_110_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_110_T_1 = tail(_next_value_110_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_110_T_2 = eq(_next_value_110_T_1, UInt<7>("h6e")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_110_T_3 = and(io_push, _next_value_110_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_111 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_111) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_110 = mux(io_pop, entries_111, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_110_T_4 = mux(_next_value_110_T_3, io_data_in, not_pushed_110) @[ShiftRegisterFifo.scala 33:16]
    node next_value_110 = _next_value_110_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_110 = mux(_entries_T_332, next_value_110, entries_110) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_333 = eq(count, UInt<7>("h6f")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_334 = and(io_push, _entries_T_333) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_335 = or(io_pop, _entries_T_334) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_111_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_111_T_1 = tail(_next_value_111_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_111_T_2 = eq(_next_value_111_T_1, UInt<7>("h6f")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_111_T_3 = and(io_push, _next_value_111_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_112 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_112) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_111 = mux(io_pop, entries_112, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_111_T_4 = mux(_next_value_111_T_3, io_data_in, not_pushed_111) @[ShiftRegisterFifo.scala 33:16]
    node next_value_111 = _next_value_111_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_111 = mux(_entries_T_335, next_value_111, entries_111) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_336 = eq(count, UInt<7>("h70")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_337 = and(io_push, _entries_T_336) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_338 = or(io_pop, _entries_T_337) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_112_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_112_T_1 = tail(_next_value_112_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_112_T_2 = eq(_next_value_112_T_1, UInt<7>("h70")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_112_T_3 = and(io_push, _next_value_112_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_113 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_113) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_112 = mux(io_pop, entries_113, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_112_T_4 = mux(_next_value_112_T_3, io_data_in, not_pushed_112) @[ShiftRegisterFifo.scala 33:16]
    node next_value_112 = _next_value_112_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_112 = mux(_entries_T_338, next_value_112, entries_112) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_339 = eq(count, UInt<7>("h71")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_340 = and(io_push, _entries_T_339) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_341 = or(io_pop, _entries_T_340) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_113_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_113_T_1 = tail(_next_value_113_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_113_T_2 = eq(_next_value_113_T_1, UInt<7>("h71")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_113_T_3 = and(io_push, _next_value_113_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_114 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_114) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_113 = mux(io_pop, entries_114, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_113_T_4 = mux(_next_value_113_T_3, io_data_in, not_pushed_113) @[ShiftRegisterFifo.scala 33:16]
    node next_value_113 = _next_value_113_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_113 = mux(_entries_T_341, next_value_113, entries_113) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_342 = eq(count, UInt<7>("h72")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_343 = and(io_push, _entries_T_342) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_344 = or(io_pop, _entries_T_343) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_114_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_114_T_1 = tail(_next_value_114_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_114_T_2 = eq(_next_value_114_T_1, UInt<7>("h72")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_114_T_3 = and(io_push, _next_value_114_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_115 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_115) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_114 = mux(io_pop, entries_115, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_114_T_4 = mux(_next_value_114_T_3, io_data_in, not_pushed_114) @[ShiftRegisterFifo.scala 33:16]
    node next_value_114 = _next_value_114_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_114 = mux(_entries_T_344, next_value_114, entries_114) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_345 = eq(count, UInt<7>("h73")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_346 = and(io_push, _entries_T_345) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_347 = or(io_pop, _entries_T_346) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_115_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_115_T_1 = tail(_next_value_115_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_115_T_2 = eq(_next_value_115_T_1, UInt<7>("h73")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_115_T_3 = and(io_push, _next_value_115_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_116 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_116) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_115 = mux(io_pop, entries_116, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_115_T_4 = mux(_next_value_115_T_3, io_data_in, not_pushed_115) @[ShiftRegisterFifo.scala 33:16]
    node next_value_115 = _next_value_115_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_115 = mux(_entries_T_347, next_value_115, entries_115) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_348 = eq(count, UInt<7>("h74")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_349 = and(io_push, _entries_T_348) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_350 = or(io_pop, _entries_T_349) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_116_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_116_T_1 = tail(_next_value_116_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_116_T_2 = eq(_next_value_116_T_1, UInt<7>("h74")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_116_T_3 = and(io_push, _next_value_116_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_117 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_117) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_116 = mux(io_pop, entries_117, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_116_T_4 = mux(_next_value_116_T_3, io_data_in, not_pushed_116) @[ShiftRegisterFifo.scala 33:16]
    node next_value_116 = _next_value_116_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_116 = mux(_entries_T_350, next_value_116, entries_116) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_351 = eq(count, UInt<7>("h75")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_352 = and(io_push, _entries_T_351) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_353 = or(io_pop, _entries_T_352) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_117_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_117_T_1 = tail(_next_value_117_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_117_T_2 = eq(_next_value_117_T_1, UInt<7>("h75")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_117_T_3 = and(io_push, _next_value_117_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_118 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_118) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_117 = mux(io_pop, entries_118, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_117_T_4 = mux(_next_value_117_T_3, io_data_in, not_pushed_117) @[ShiftRegisterFifo.scala 33:16]
    node next_value_117 = _next_value_117_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_117 = mux(_entries_T_353, next_value_117, entries_117) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_354 = eq(count, UInt<7>("h76")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_355 = and(io_push, _entries_T_354) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_356 = or(io_pop, _entries_T_355) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_118_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_118_T_1 = tail(_next_value_118_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_118_T_2 = eq(_next_value_118_T_1, UInt<7>("h76")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_118_T_3 = and(io_push, _next_value_118_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_119 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_119) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_118 = mux(io_pop, entries_119, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_118_T_4 = mux(_next_value_118_T_3, io_data_in, not_pushed_118) @[ShiftRegisterFifo.scala 33:16]
    node next_value_118 = _next_value_118_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_118 = mux(_entries_T_356, next_value_118, entries_118) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_357 = eq(count, UInt<7>("h77")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_358 = and(io_push, _entries_T_357) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_359 = or(io_pop, _entries_T_358) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_119_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_119_T_1 = tail(_next_value_119_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_119_T_2 = eq(_next_value_119_T_1, UInt<7>("h77")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_119_T_3 = and(io_push, _next_value_119_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_120 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_120) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_119 = mux(io_pop, entries_120, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_119_T_4 = mux(_next_value_119_T_3, io_data_in, not_pushed_119) @[ShiftRegisterFifo.scala 33:16]
    node next_value_119 = _next_value_119_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_119 = mux(_entries_T_359, next_value_119, entries_119) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_360 = eq(count, UInt<7>("h78")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_361 = and(io_push, _entries_T_360) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_362 = or(io_pop, _entries_T_361) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_120_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_120_T_1 = tail(_next_value_120_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_120_T_2 = eq(_next_value_120_T_1, UInt<7>("h78")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_120_T_3 = and(io_push, _next_value_120_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_121 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_121) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_120 = mux(io_pop, entries_121, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_120_T_4 = mux(_next_value_120_T_3, io_data_in, not_pushed_120) @[ShiftRegisterFifo.scala 33:16]
    node next_value_120 = _next_value_120_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_120 = mux(_entries_T_362, next_value_120, entries_120) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_363 = eq(count, UInt<7>("h79")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_364 = and(io_push, _entries_T_363) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_365 = or(io_pop, _entries_T_364) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_121_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_121_T_1 = tail(_next_value_121_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_121_T_2 = eq(_next_value_121_T_1, UInt<7>("h79")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_121_T_3 = and(io_push, _next_value_121_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_122 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_122) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_121 = mux(io_pop, entries_122, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_121_T_4 = mux(_next_value_121_T_3, io_data_in, not_pushed_121) @[ShiftRegisterFifo.scala 33:16]
    node next_value_121 = _next_value_121_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_121 = mux(_entries_T_365, next_value_121, entries_121) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_366 = eq(count, UInt<7>("h7a")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_367 = and(io_push, _entries_T_366) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_368 = or(io_pop, _entries_T_367) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_122_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_122_T_1 = tail(_next_value_122_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_122_T_2 = eq(_next_value_122_T_1, UInt<7>("h7a")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_122_T_3 = and(io_push, _next_value_122_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_123 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_123) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_122 = mux(io_pop, entries_123, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_122_T_4 = mux(_next_value_122_T_3, io_data_in, not_pushed_122) @[ShiftRegisterFifo.scala 33:16]
    node next_value_122 = _next_value_122_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_122 = mux(_entries_T_368, next_value_122, entries_122) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_369 = eq(count, UInt<7>("h7b")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_370 = and(io_push, _entries_T_369) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_371 = or(io_pop, _entries_T_370) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_123_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_123_T_1 = tail(_next_value_123_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_123_T_2 = eq(_next_value_123_T_1, UInt<7>("h7b")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_123_T_3 = and(io_push, _next_value_123_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_124 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_124) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_123 = mux(io_pop, entries_124, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_123_T_4 = mux(_next_value_123_T_3, io_data_in, not_pushed_123) @[ShiftRegisterFifo.scala 33:16]
    node next_value_123 = _next_value_123_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_123 = mux(_entries_T_371, next_value_123, entries_123) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_372 = eq(count, UInt<7>("h7c")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_373 = and(io_push, _entries_T_372) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_374 = or(io_pop, _entries_T_373) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_124_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_124_T_1 = tail(_next_value_124_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_124_T_2 = eq(_next_value_124_T_1, UInt<7>("h7c")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_124_T_3 = and(io_push, _next_value_124_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_125 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_125) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_124 = mux(io_pop, entries_125, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_124_T_4 = mux(_next_value_124_T_3, io_data_in, not_pushed_124) @[ShiftRegisterFifo.scala 33:16]
    node next_value_124 = _next_value_124_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_124 = mux(_entries_T_374, next_value_124, entries_124) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_375 = eq(count, UInt<7>("h7d")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_376 = and(io_push, _entries_T_375) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_377 = or(io_pop, _entries_T_376) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_125_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_125_T_1 = tail(_next_value_125_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_125_T_2 = eq(_next_value_125_T_1, UInt<7>("h7d")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_125_T_3 = and(io_push, _next_value_125_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_126 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_126) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_125 = mux(io_pop, entries_126, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_125_T_4 = mux(_next_value_125_T_3, io_data_in, not_pushed_125) @[ShiftRegisterFifo.scala 33:16]
    node next_value_125 = _next_value_125_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_125 = mux(_entries_T_377, next_value_125, entries_125) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_378 = eq(count, UInt<7>("h7e")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_379 = and(io_push, _entries_T_378) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_380 = or(io_pop, _entries_T_379) @[ShiftRegisterFifo.scala 23:17]
    node _next_value_126_T = sub(count, io_pop) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_126_T_1 = tail(_next_value_126_T, 1) @[ShiftRegisterFifo.scala 33:35]
    node _next_value_126_T_2 = eq(_next_value_126_T_1, UInt<7>("h7e")) @[ShiftRegisterFifo.scala 33:45]
    node _next_value_126_T_3 = and(io_push, _next_value_126_T_2) @[ShiftRegisterFifo.scala 33:25]
    reg entries_127 : UInt<64>, clock with :
      reset => (UInt<1>("h0"), entries_127) @[ShiftRegisterFifo.scala 22:22]
    node not_pushed_126 = mux(io_pop, entries_127, UInt<1>("h0")) @[ShiftRegisterFifo.scala 32:49]
    node _next_value_126_T_4 = mux(_next_value_126_T_3, io_data_in, not_pushed_126) @[ShiftRegisterFifo.scala 33:16]
    node next_value_126 = _next_value_126_T_4 @[ShiftRegisterFifo.scala 20:40 33:10]
    node _GEN_126 = mux(_entries_T_380, next_value_126, entries_126) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    node _entries_T_381 = eq(count, UInt<7>("h7f")) @[ShiftRegisterFifo.scala 23:39]
    node _entries_T_382 = and(io_push, _entries_T_381) @[ShiftRegisterFifo.scala 23:29]
    node _entries_T_383 = or(io_pop, _entries_T_382) @[ShiftRegisterFifo.scala 23:17]
    node next_value_127 = validif(UInt<1>("h0"), UInt<64>("h0"))
    node _GEN_127 = mux(_entries_T_383, next_value_127, entries_127) @[ShiftRegisterFifo.scala 23:51 24:11 22:22]
    io_full <= _io_full_T @[ShiftRegisterFifo.scala 18:11]
    io_empty <= _io_empty_T @[ShiftRegisterFifo.scala 17:12]
    io_data_out <= entries_0 @[ShiftRegisterFifo.scala 36:15]
    count <= mux(reset, UInt<8>("h0"), _count_T_3) @[ShiftRegisterFifo.scala 14:{22,22} 15:9]
    entries_0 <= mux(reset, UInt<64>("h0"), _GEN_0) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_1 <= mux(reset, UInt<64>("h0"), _GEN_1) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_2 <= mux(reset, UInt<64>("h0"), _GEN_2) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_3 <= mux(reset, UInt<64>("h0"), _GEN_3) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_4 <= mux(reset, UInt<64>("h0"), _GEN_4) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_5 <= mux(reset, UInt<64>("h0"), _GEN_5) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_6 <= mux(reset, UInt<64>("h0"), _GEN_6) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_7 <= mux(reset, UInt<64>("h0"), _GEN_7) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_8 <= mux(reset, UInt<64>("h0"), _GEN_8) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_9 <= mux(reset, UInt<64>("h0"), _GEN_9) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_10 <= mux(reset, UInt<64>("h0"), _GEN_10) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_11 <= mux(reset, UInt<64>("h0"), _GEN_11) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_12 <= mux(reset, UInt<64>("h0"), _GEN_12) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_13 <= mux(reset, UInt<64>("h0"), _GEN_13) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_14 <= mux(reset, UInt<64>("h0"), _GEN_14) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_15 <= mux(reset, UInt<64>("h0"), _GEN_15) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_16 <= mux(reset, UInt<64>("h0"), _GEN_16) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_17 <= mux(reset, UInt<64>("h0"), _GEN_17) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_18 <= mux(reset, UInt<64>("h0"), _GEN_18) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_19 <= mux(reset, UInt<64>("h0"), _GEN_19) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_20 <= mux(reset, UInt<64>("h0"), _GEN_20) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_21 <= mux(reset, UInt<64>("h0"), _GEN_21) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_22 <= mux(reset, UInt<64>("h0"), _GEN_22) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_23 <= mux(reset, UInt<64>("h0"), _GEN_23) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_24 <= mux(reset, UInt<64>("h0"), _GEN_24) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_25 <= mux(reset, UInt<64>("h0"), _GEN_25) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_26 <= mux(reset, UInt<64>("h0"), _GEN_26) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_27 <= mux(reset, UInt<64>("h0"), _GEN_27) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_28 <= mux(reset, UInt<64>("h0"), _GEN_28) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_29 <= mux(reset, UInt<64>("h0"), _GEN_29) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_30 <= mux(reset, UInt<64>("h0"), _GEN_30) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_31 <= mux(reset, UInt<64>("h0"), _GEN_31) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_32 <= mux(reset, UInt<64>("h0"), _GEN_32) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_33 <= mux(reset, UInt<64>("h0"), _GEN_33) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_34 <= mux(reset, UInt<64>("h0"), _GEN_34) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_35 <= mux(reset, UInt<64>("h0"), _GEN_35) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_36 <= mux(reset, UInt<64>("h0"), _GEN_36) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_37 <= mux(reset, UInt<64>("h0"), _GEN_37) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_38 <= mux(reset, UInt<64>("h0"), _GEN_38) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_39 <= mux(reset, UInt<64>("h0"), _GEN_39) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_40 <= mux(reset, UInt<64>("h0"), _GEN_40) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_41 <= mux(reset, UInt<64>("h0"), _GEN_41) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_42 <= mux(reset, UInt<64>("h0"), _GEN_42) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_43 <= mux(reset, UInt<64>("h0"), _GEN_43) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_44 <= mux(reset, UInt<64>("h0"), _GEN_44) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_45 <= mux(reset, UInt<64>("h0"), _GEN_45) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_46 <= mux(reset, UInt<64>("h0"), _GEN_46) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_47 <= mux(reset, UInt<64>("h0"), _GEN_47) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_48 <= mux(reset, UInt<64>("h0"), _GEN_48) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_49 <= mux(reset, UInt<64>("h0"), _GEN_49) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_50 <= mux(reset, UInt<64>("h0"), _GEN_50) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_51 <= mux(reset, UInt<64>("h0"), _GEN_51) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_52 <= mux(reset, UInt<64>("h0"), _GEN_52) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_53 <= mux(reset, UInt<64>("h0"), _GEN_53) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_54 <= mux(reset, UInt<64>("h0"), _GEN_54) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_55 <= mux(reset, UInt<64>("h0"), _GEN_55) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_56 <= mux(reset, UInt<64>("h0"), _GEN_56) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_57 <= mux(reset, UInt<64>("h0"), _GEN_57) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_58 <= mux(reset, UInt<64>("h0"), _GEN_58) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_59 <= mux(reset, UInt<64>("h0"), _GEN_59) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_60 <= mux(reset, UInt<64>("h0"), _GEN_60) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_61 <= mux(reset, UInt<64>("h0"), _GEN_61) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_62 <= mux(reset, UInt<64>("h0"), _GEN_62) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_63 <= mux(reset, UInt<64>("h0"), _GEN_63) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_64 <= mux(reset, UInt<64>("h0"), _GEN_64) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_65 <= mux(reset, UInt<64>("h0"), _GEN_65) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_66 <= mux(reset, UInt<64>("h0"), _GEN_66) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_67 <= mux(reset, UInt<64>("h0"), _GEN_67) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_68 <= mux(reset, UInt<64>("h0"), _GEN_68) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_69 <= mux(reset, UInt<64>("h0"), _GEN_69) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_70 <= mux(reset, UInt<64>("h0"), _GEN_70) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_71 <= mux(reset, UInt<64>("h0"), _GEN_71) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_72 <= mux(reset, UInt<64>("h0"), _GEN_72) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_73 <= mux(reset, UInt<64>("h0"), _GEN_73) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_74 <= mux(reset, UInt<64>("h0"), _GEN_74) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_75 <= mux(reset, UInt<64>("h0"), _GEN_75) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_76 <= mux(reset, UInt<64>("h0"), _GEN_76) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_77 <= mux(reset, UInt<64>("h0"), _GEN_77) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_78 <= mux(reset, UInt<64>("h0"), _GEN_78) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_79 <= mux(reset, UInt<64>("h0"), _GEN_79) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_80 <= mux(reset, UInt<64>("h0"), _GEN_80) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_81 <= mux(reset, UInt<64>("h0"), _GEN_81) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_82 <= mux(reset, UInt<64>("h0"), _GEN_82) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_83 <= mux(reset, UInt<64>("h0"), _GEN_83) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_84 <= mux(reset, UInt<64>("h0"), _GEN_84) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_85 <= mux(reset, UInt<64>("h0"), _GEN_85) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_86 <= mux(reset, UInt<64>("h0"), _GEN_86) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_87 <= mux(reset, UInt<64>("h0"), _GEN_87) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_88 <= mux(reset, UInt<64>("h0"), _GEN_88) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_89 <= mux(reset, UInt<64>("h0"), _GEN_89) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_90 <= mux(reset, UInt<64>("h0"), _GEN_90) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_91 <= mux(reset, UInt<64>("h0"), _GEN_91) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_92 <= mux(reset, UInt<64>("h0"), _GEN_92) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_93 <= mux(reset, UInt<64>("h0"), _GEN_93) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_94 <= mux(reset, UInt<64>("h0"), _GEN_94) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_95 <= mux(reset, UInt<64>("h0"), _GEN_95) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_96 <= mux(reset, UInt<64>("h0"), _GEN_96) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_97 <= mux(reset, UInt<64>("h0"), _GEN_97) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_98 <= mux(reset, UInt<64>("h0"), _GEN_98) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_99 <= mux(reset, UInt<64>("h0"), _GEN_99) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_100 <= mux(reset, UInt<64>("h0"), _GEN_100) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_101 <= mux(reset, UInt<64>("h0"), _GEN_101) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_102 <= mux(reset, UInt<64>("h0"), _GEN_102) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_103 <= mux(reset, UInt<64>("h0"), _GEN_103) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_104 <= mux(reset, UInt<64>("h0"), _GEN_104) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_105 <= mux(reset, UInt<64>("h0"), _GEN_105) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_106 <= mux(reset, UInt<64>("h0"), _GEN_106) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_107 <= mux(reset, UInt<64>("h0"), _GEN_107) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_108 <= mux(reset, UInt<64>("h0"), _GEN_108) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_109 <= mux(reset, UInt<64>("h0"), _GEN_109) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_110 <= mux(reset, UInt<64>("h0"), _GEN_110) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_111 <= mux(reset, UInt<64>("h0"), _GEN_111) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_112 <= mux(reset, UInt<64>("h0"), _GEN_112) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_113 <= mux(reset, UInt<64>("h0"), _GEN_113) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_114 <= mux(reset, UInt<64>("h0"), _GEN_114) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_115 <= mux(reset, UInt<64>("h0"), _GEN_115) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_116 <= mux(reset, UInt<64>("h0"), _GEN_116) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_117 <= mux(reset, UInt<64>("h0"), _GEN_117) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_118 <= mux(reset, UInt<64>("h0"), _GEN_118) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_119 <= mux(reset, UInt<64>("h0"), _GEN_119) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_120 <= mux(reset, UInt<64>("h0"), _GEN_120) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_121 <= mux(reset, UInt<64>("h0"), _GEN_121) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_122 <= mux(reset, UInt<64>("h0"), _GEN_122) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_123 <= mux(reset, UInt<64>("h0"), _GEN_123) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_124 <= mux(reset, UInt<64>("h0"), _GEN_124) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_125 <= mux(reset, UInt<64>("h0"), _GEN_125) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_126 <= mux(reset, UInt<64>("h0"), _GEN_126) @[ShiftRegisterFifo.scala 22:{22,22}]
    entries_127 <= mux(reset, UInt<64>("h0"), _GEN_127) @[ShiftRegisterFifo.scala 22:{22,22}]

  module MagicPacketTracker :
    input clock : Clock
    input reset : UInt<1>
    input enq_valid : UInt<1>
    input enq_bits : UInt<64>
    input deq_valid : UInt<1>
    input deq_bits : UInt<64>
    input startTracking : UInt<1>

    reg elementCount : UInt<9>, clock with :
      reset => (UInt<1>("h0"), elementCount) @[MagicPacketTracker.scala 45:29]
    node _nextElementCount_T = eq(deq_valid, UInt<1>("h0")) @[MagicPacketTracker.scala 47:17]
    node _nextElementCount_T_1 = and(enq_valid, _nextElementCount_T) @[MagicPacketTracker.scala 47:14]
    node _nextElementCount_T_2 = add(elementCount, UInt<1>("h1")) @[MagicPacketTracker.scala 48:18]
    node _nextElementCount_T_3 = tail(_nextElementCount_T_2, 1) @[MagicPacketTracker.scala 48:18]
    node _nextElementCount_T_4 = eq(enq_valid, UInt<1>("h0")) @[MagicPacketTracker.scala 49:9]
    node _nextElementCount_T_5 = and(_nextElementCount_T_4, deq_valid) @[MagicPacketTracker.scala 49:19]
    node _nextElementCount_T_6 = sub(elementCount, UInt<1>("h1")) @[MagicPacketTracker.scala 49:45]
    node _nextElementCount_T_7 = tail(_nextElementCount_T_6, 1) @[MagicPacketTracker.scala 49:45]
    node _nextElementCount_T_8 = mux(_nextElementCount_T_5, _nextElementCount_T_7, elementCount) @[MagicPacketTracker.scala 49:8]
    node nextElementCount = mux(_nextElementCount_T_1, _nextElementCount_T_3, _nextElementCount_T_8) @[MagicPacketTracker.scala 46:29]
    reg isActive : UInt<1>, clock with :
      reset => (UInt<1>("h0"), isActive) @[MagicPacketTracker.scala 55:25]
    reg packetValue : UInt<64>, clock with :
      reset => (UInt<1>("h0"), packetValue) @[MagicPacketTracker.scala 56:24]
    reg packetCount : UInt<9>, clock with :
      reset => (UInt<1>("h0"), packetCount) @[MagicPacketTracker.scala 57:24]
    node _T = eq(isActive, UInt<1>("h0")) @[MagicPacketTracker.scala 59:8]
    node _T_1 = and(_T, enq_valid) @[MagicPacketTracker.scala 59:18]
    node _T_2 = and(_T_1, startTracking) @[MagicPacketTracker.scala 59:30]
    node _T_3 = eq(elementCount, UInt<1>("h0")) @[MagicPacketTracker.scala 60:35]
    node _T_4 = and(deq_valid, _T_3) @[MagicPacketTracker.scala 60:19]
    node _T_5 = eq(enq_bits, deq_bits) @[MagicPacketTracker.scala 62:25]
    node _T_6 = asUInt(reset) @[MagicPacketTracker.scala 61:13]
    node _T_7 = eq(_T_6, UInt<1>("h0")) @[MagicPacketTracker.scala 61:13]
    node _T_8 = eq(_T_5, UInt<1>("h0")) @[MagicPacketTracker.scala 61:13]
    node _GEN_0 = mux(_T_4, isActive, UInt<1>("h1")) @[MagicPacketTracker.scala 55:25 60:44 68:16]
    node _GEN_1 = mux(_T_4, packetValue, enq_bits) @[MagicPacketTracker.scala 56:24 60:44 69:19]
    node _GEN_2 = mux(_T_4, packetCount, nextElementCount) @[MagicPacketTracker.scala 57:24 60:44 70:19]
    node _GEN_3 = mux(_T_2, _GEN_0, isActive) @[MagicPacketTracker.scala 55:25 59:48]
    node _GEN_4 = mux(_T_2, _GEN_1, packetValue) @[MagicPacketTracker.scala 56:24 59:48]
    node _GEN_5 = mux(_T_2, _GEN_2, packetCount) @[MagicPacketTracker.scala 57:24 59:48]
    node _T_9 = and(isActive, deq_valid) @[MagicPacketTracker.scala 74:17]
    node _packetCount_T = sub(packetCount, UInt<1>("h1")) @[MagicPacketTracker.scala 75:32]
    node _packetCount_T_1 = tail(_packetCount_T, 1) @[MagicPacketTracker.scala 75:32]
    node _T_10 = eq(packetCount, UInt<1>("h1")) @[MagicPacketTracker.scala 76:22]
    node _T_11 = eq(packetValue, deq_bits) @[MagicPacketTracker.scala 78:28]
    node _T_12 = asUInt(reset) @[MagicPacketTracker.scala 77:13]
    node _T_13 = eq(_T_12, UInt<1>("h0")) @[MagicPacketTracker.scala 77:13]
    node _T_14 = eq(_T_11, UInt<1>("h0")) @[MagicPacketTracker.scala 77:13]
    node _GEN_6 = mux(_T_10, UInt<1>("h0"), _GEN_3) @[MagicPacketTracker.scala 76:31 83:16]
    node _GEN_7 = mux(_T_9, _packetCount_T_1, _GEN_5) @[MagicPacketTracker.scala 74:30 75:17]
    node _GEN_8 = mux(_T_9, _GEN_6, _GEN_3) @[MagicPacketTracker.scala 74:30]
    node _T_15 = eq(elementCount, UInt<9>("h100")) @[MagicPacketTracker.scala 88:21]
    node _shouldIncrement_T = eq(deq_valid, UInt<1>("h0")) @[MagicPacketTracker.scala 89:39]
    node shouldIncrement = and(enq_valid, _shouldIncrement_T) @[MagicPacketTracker.scala 89:36]
    node _T_16 = eq(shouldIncrement, UInt<1>("h0")) @[MagicPacketTracker.scala 91:7]
    node _T_17 = asUInt(reset) @[MagicPacketTracker.scala 90:11]
    node _T_18 = eq(_T_17, UInt<1>("h0")) @[MagicPacketTracker.scala 90:11]
    node _T_19 = eq(_T_16, UInt<1>("h0")) @[MagicPacketTracker.scala 90:11]
    elementCount <= mux(reset, UInt<9>("h0"), nextElementCount) @[MagicPacketTracker.scala 45:{29,29} 51:16]
    isActive <= mux(reset, UInt<1>("h0"), _GEN_8) @[MagicPacketTracker.scala 55:{25,25}]
    packetValue <= _GEN_4
    packetCount <= _GEN_7
    printf(clock, and(and(and(and(and(UInt<1>("h1"), _T_2), _T_4), _T_7), _T_8), UInt<1>("h1")), "Assertion failed: element should pass through the fifo, but %x != %x\n    at MagicPacketTracker.scala:61 assert(\n", enq_bits, deq_bits) : printf @[MagicPacketTracker.scala 61:13]
    assert(clock, _T_5, and(and(and(and(UInt<1>("h1"), _T_2), _T_4), _T_7), UInt<1>("h1")), "") : assert @[MagicPacketTracker.scala 61:13]
    printf(clock, and(and(and(and(and(UInt<1>("h1"), _T_9), _T_10), _T_13), _T_14), UInt<1>("h1")), "Assertion failed: element should be dequeued in this cycle, but %x != %x\n    at MagicPacketTracker.scala:77 assert(\n", packetValue, deq_bits) : printf_1 @[MagicPacketTracker.scala 77:13]
    assert(clock, _T_11, and(and(and(and(UInt<1>("h1"), _T_9), _T_10), _T_13), UInt<1>("h1")), "") : assert_1 @[MagicPacketTracker.scala 77:13]
    printf(clock, and(and(and(and(UInt<1>("h1"), _T_15), _T_18), _T_19), UInt<1>("h1")), "Assertion failed: MagicPacketTracker: element counter is overflowing %d -> %d\nThis could indicate either a bug in your FIFO design, or an insufficient depth provided to the MagicPacketTracker constructor.\n    at MagicPacketTracker.scala:90 assert(\n", elementCount, nextElementCount) : printf_2 @[MagicPacketTracker.scala 90:11]
    assert(clock, _T_16, and(and(and(UInt<1>("h1"), _T_15), _T_18), UInt<1>("h1")), "") : assert_2 @[MagicPacketTracker.scala 90:11]

  module FifoFormalHarness :
    input clock : Clock
    input reset : UInt<1>
    output enq_ready : UInt<1>
    input enq_valid : UInt<1>
    input enq_bits : UInt<64>
    input deq_ready : UInt<1>
    output deq_valid : UInt<1>
    output deq_bits : UInt<64>
    input startTracking : UInt<1>

    inst dut of ShiftRegisterFifo @[FifoFormalHarness.scala 9:19]
    inst tracker of MagicPacketTracker @[MagicPacketTracker.scala 18:25]
    node _enq_ready_T = eq(dut.io_full, UInt<1>("h0")) @[FifoFormalHarness.scala 12:16]
    node _dut_io_push_T = and(enq_ready, enq_valid) @[Decoupled.scala 50:35]
    node _deq_valid_T = eq(dut.io_empty, UInt<1>("h0")) @[FifoFormalHarness.scala 16:16]
    node _dut_io_pop_T = and(deq_ready, deq_valid) @[Decoupled.scala 50:35]
    node _validIO_valid_T = and(enq_ready, enq_valid) @[Decoupled.scala 50:35]
    node _validIO_valid_T_1 = and(deq_ready, deq_valid) @[Decoupled.scala 50:35]
    node validIO_valid = _validIO_valid_T @[MagicPacketTracker.scala 32:23 33:19]
    node validIO_bits = enq_bits @[MagicPacketTracker.scala 32:23 34:18]
    node validIO_1_valid = _validIO_valid_T_1 @[MagicPacketTracker.scala 32:23 33:19]
    node validIO_1_bits = deq_bits @[MagicPacketTracker.scala 32:23 34:18]
    enq_ready <= _enq_ready_T @[FifoFormalHarness.scala 12:13]
    deq_valid <= _deq_valid_T @[FifoFormalHarness.scala 16:13]
    deq_bits <= dut.io_data_out @[FifoFormalHarness.scala 15:12]
    dut.clock <= clock
    dut.reset <= reset
    dut.io_push <= _dut_io_push_T @[FifoFormalHarness.scala 13:15]
    dut.io_pop <= _dut_io_pop_T @[FifoFormalHarness.scala 17:14]
    dut.io_data_in <= enq_bits @[FifoFormalHarness.scala 11:18]
    tracker.clock <= clock
    tracker.reset <= reset
    tracker.enq_valid <= validIO_valid @[MagicPacketTracker.scala 19:17]
    tracker.enq_bits <= validIO_bits @[MagicPacketTracker.scala 19:17]
    tracker.deq_valid <= validIO_1_valid @[MagicPacketTracker.scala 20:17]
    tracker.deq_bits <= validIO_1_bits @[MagicPacketTracker.scala 20:17]
    tracker.startTracking <= startTracking @[MagicPacketTracker.scala 22:27]
