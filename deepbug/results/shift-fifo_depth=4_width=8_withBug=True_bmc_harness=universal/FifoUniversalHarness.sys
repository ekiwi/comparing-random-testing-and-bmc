FifoUniversalHarness
input reset : bv<1>
input tryPush_valid : bv<1>
input tryPush_bits : bv<8>
input tryPop : bv<1>
input dut_next_value_3_invalid : bv<8>
input reference__GEN_0_invalid : bv<2>
input reference__GEN_3_invalid : bv<1>
input reference__GEN_4_invalid : bv<8>
node dut_io_full : bv<1> = ugeq(dut_count, 3'b100)
node _dut_io_push_T : bv<1> = not(dut_io_full)
node dut_io_push : bv<1> = and(tryPush_valid, _dut_io_push_T)
node dut__count_T : bv<4> = add(zext(dut_count, 1), zext(dut_io_push, 3))
node dut__count_T_1 : bv<3> = dut__count_T[2:0]
node dut_io_empty : bv<1> = eq(dut_count, zext(1'b0, 2))
node _dut_io_pop_T : bv<1> = not(dut_io_empty)
node dut_io_pop : bv<1> = and(tryPop, _dut_io_pop_T)
node dut__count_T_2 : bv<4> = sub(zext(dut__count_T_1, 1), zext(dut_io_pop, 3))
node dut__count_T_3 : bv<3> = dut__count_T_2[2:0]
node dut__io_empty_T : bv<1> = eq(dut_count, zext(1'b0, 2))
node dut__entries_T_1 : bv<1> = and(dut_io_push, dut__io_empty_T)
node dut__entries_T_2 : bv<1> = or(dut_io_pop, dut__entries_T_1)
node dut__next_value_0_T : bv<4> = sub(zext(dut_count, 1), zext(dut_io_pop, 3))
node dut__next_value_0_T_1 : bv<3> = dut__next_value_0_T[2:0]
node dut__next_value_0_T_2 : bv<1> = eq(dut__next_value_0_T_1, zext(1'b0, 2))
node dut__next_value_0_T_3 : bv<1> = and(dut_io_push, dut__next_value_0_T_2)
node dut_not_pushed : bv<8> = ite(dut_io_pop, dut_entries_1, zext(1'b0, 7))
node dut_io_data_in : bv<8> = tryPush_bits
node dut_next_value_0 : bv<8> = ite(dut__next_value_0_T_3, dut_io_data_in, dut_not_pushed)
node dut__GEN_0 : bv<8> = ite(dut__entries_T_2, dut_next_value_0, dut_entries_0)
node dut__entries_T_3 : bv<1> = eq(dut_count, zext(1'b1, 2))
node dut__entries_T_4 : bv<1> = and(dut_io_push, dut__entries_T_3)
node dut__entries_T_5 : bv<1> = or(dut_io_pop, dut__entries_T_4)
node dut__next_value_1_T_2 : bv<1> = eq(dut__next_value_0_T_1, zext(1'b1, 2))
node dut__next_value_1_T_3 : bv<1> = and(dut_io_push, dut__next_value_1_T_2)
node dut_not_pushed_1 : bv<8> = ite(dut_io_pop, dut_entries_2, zext(1'b0, 7))
node dut_next_value_1 : bv<8> = ite(dut__next_value_1_T_3, dut_io_data_in, dut_not_pushed_1)
node dut__GEN_1 : bv<8> = ite(dut__entries_T_5, dut_next_value_1, dut_entries_1)
node dut__entries_T_6 : bv<1> = eq(dut_count, zext(2'b10, 1))
node dut__entries_T_7 : bv<1> = and(dut_io_push, dut__entries_T_6)
node dut__entries_T_8 : bv<1> = or(dut_io_pop, dut__entries_T_7)
node dut__next_value_2_T_2 : bv<1> = eq(dut__next_value_0_T_1, zext(2'b10, 1))
node dut__next_value_2_T_3 : bv<1> = and(dut_io_push, dut__next_value_2_T_2)
node dut_not_pushed_2 : bv<8> = ite(dut_io_pop, dut_entries_3, zext(1'b0, 7))
node dut_next_value_2 : bv<8> = ite(dut__next_value_2_T_3, dut_io_data_in, dut_not_pushed_2)
node dut__GEN_2 : bv<8> = ite(dut__entries_T_8, dut_next_value_2, dut_entries_2)
node dut__entries_T_9 : bv<1> = eq(dut_count, zext(2'b11, 1))
node dut__entries_T_10 : bv<1> = and(dut_io_push, dut__entries_T_9)
node dut__entries_T_11 : bv<1> = or(dut_io_pop, dut__entries_T_10)
output dut_next_value_3_invalid.en : bv<1> = 1'b1
node dut__GEN_3 : bv<8> = ite(dut__entries_T_11, dut_next_value_3_invalid, dut_entries_3)
node dut_io_data_out : bv<8> = dut_entries_0
node reference_ram.io_deq_bits_MPORT.addr : bv<2> = reference_deq_ptr_value
node reference_ram.io_deq_bits_MPORT.data : bv<8> = reference_ram[reference_ram.io_deq_bits_MPORT.addr]
node reference_ptr_match : bv<1> = eq(reference_enq_ptr_value, reference_deq_ptr_value)
node reference__empty_T : bv<1> = not(reference_maybe_full)
node reference_empty : bv<1> = and(reference_ptr_match, reference__empty_T)
node reference_full : bv<1> = and(reference_ptr_match, reference_maybe_full)
node reference_io_deq_ready : bv<1> = dut_io_pop
node reference__io_enq_ready_T : bv<1> = not(reference_full)
node reference_io_enq_ready : bv<1> = or(reference_io_deq_ready, reference__io_enq_ready_T)
node reference_io_enq_valid : bv<1> = dut_io_push
node reference__do_enq_T : bv<1> = and(reference_io_enq_ready, reference_io_enq_valid)
node reference__io_deq_valid_T : bv<1> = not(reference_empty)
node reference_io_deq_valid : bv<1> = or(reference_io_enq_valid, reference__io_deq_valid_T)
node reference__do_deq_T : bv<1> = and(reference_io_deq_ready, reference_io_deq_valid)
node reference__value_T : bv<3> = add(zext(reference_enq_ptr_value, 1), zext(1'b1, 2))
node reference__value_T_1 : bv<2> = reference__value_T[1:0]
node reference__GEN_12 : bv<1> = ite(reference_io_deq_ready, 1'b0, reference__do_enq_T)
node reference_do_enq : bv<1> = ite(reference_empty, reference__GEN_12, reference__do_enq_T)
output reference__GEN_0_invalid.en : bv<1> = not(reference_do_enq)
output reference__GEN_3_invalid.en : bv<1> = not(reference_do_enq)
output reference__GEN_4_invalid.en : bv<1> = not(reference_do_enq)
node reference__GEN_5 : bv<2> = ite(reference_do_enq, reference__value_T_1, reference_enq_ptr_value)
node reference__value_T_2 : bv<3> = add(zext(reference_deq_ptr_value, 1), zext(1'b1, 2))
node reference__value_T_3 : bv<2> = reference__value_T_2[1:0]
node reference_do_deq : bv<1> = ite(reference_empty, 1'b0, reference__do_deq_T)
node reference__GEN_6 : bv<2> = ite(reference_do_deq, reference__value_T_3, reference_deq_ptr_value)
node reference__T : bv<1> = not(eq(reference_do_enq, reference_do_deq))
node reference__GEN_7 : bv<1> = ite(reference__T, reference_do_enq, reference_maybe_full)
node reference__ptr_diff_T : bv<3> = sub(zext(reference_enq_ptr_value, 1), zext(reference_deq_ptr_value, 1))
node reference_ptr_diff : bv<2> = reference__ptr_diff_T[1:0]
node reference__io_count_T : bv<1> = and(reference_maybe_full, reference_ptr_match)
node reference__io_count_T_1 : bv<3> = ite(reference__io_count_T, 3'b100, zext(1'b0, 2))
node reference_io_enq_bits : bv<8> = dut_io_data_in
node reference_io_deq_bits : bv<8> = ite(reference_empty, reference_io_enq_bits, reference_ram.io_deq_bits_MPORT.data)
node reference_io_count : bv<3> = or(reference__io_count_T_1, zext(reference_ptr_diff, 1))
node reference_ram.io_deq_bits_MPORT.en : bv<1> = 1'b1
node reference_ram.MPORT.en : bv<1> = ite(reference_empty, reference__GEN_12, reference__do_enq_T)
node reference_ram.MPORT.addr : bv<2> = ite(not(reference_do_enq), reference__GEN_0_invalid, reference_enq_ptr_value)
node reference_ram.MPORT.mask : bv<1> = ite(not(reference_do_enq), reference__GEN_3_invalid, 1'b1)
node reference_ram.MPORT.data : bv<8> = ite(not(reference_do_enq), reference__GEN_4_invalid, reference_io_enq_bits)
node _T : bv<1> = not(eq(reference_io_count, zext(1'b0, 2)))
node _T_2 : bv<1> = not(reset)
node _T_3 : bv<1> = not(_T)
node _T_4 : bv<1> = eq(reference_io_deq_bits, dut_io_data_out)
node _T_7 : bv<1> = not(_T_4)
node _resetPhase : bv<1> = not(ugeq(_resetCount, 1'b1))
node dut_reset : bv<1> = reset
node reference_reset : bv<1> = reset
bad assert : bv<1> = not(implies(and(dut_io_pop, _T_2), _T))
bad assert_1 : bv<1> = not(implies(and(dut_io_pop, _T_2), _T_4))
constraint _resetActive : bv<1> = implies(_resetPhase, reset)
state dut_count : bv<3>
  [next] ite(dut_reset, 3'b0, dut__count_T_3)
state dut_entries_0 : bv<8>
  [next] ite(dut_reset, 8'b0, dut__GEN_0)
state dut_entries_1 : bv<8>
  [next] ite(dut_reset, 8'b0, dut__GEN_1)
state dut_entries_2 : bv<8>
  [next] ite(dut_reset, 8'b0, dut__GEN_2)
state dut_entries_3 : bv<8>
  [next] ite(dut_reset, 8'b0, dut__GEN_3)
state reference_ram : bv<2> -> bv<8>
  [next] ite(and(reference_ram.MPORT.en, reference_ram.MPORT.mask), reference_ram[reference_ram.MPORT.addr := reference_ram.MPORT.data], reference_ram)
state reference_enq_ptr_value : bv<2>
  [next] ite(reference_reset, 2'b0, reference__GEN_5)
state reference_deq_ptr_value : bv<2>
  [next] ite(reference_reset, 2'b0, reference__GEN_6)
state reference_maybe_full : bv<1>
  [next] ite(reference_reset, 1'b0, reference__GEN_7)
state _resetCount : bv<1>
  [init] 1'b0
  [next] ite(_resetPhase, add(zext(_resetCount, 1), zext(1'b1, 1))[0], _resetCount)